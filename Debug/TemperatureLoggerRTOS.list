
TemperatureLoggerRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d90  08003d90  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d98  08003d98  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e10  20000010  08003db0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e20  08003db0  00022e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f35a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002296  00000000  00000000  0002f39a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  00031630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00032408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016337  00000000  00000000  000330d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad58  00000000  00000000  0004940f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fb37  00000000  00000000  00054167  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3c9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000391c  00000000  00000000  000e3d1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003d38 	.word	0x08003d38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08003d38 	.word	0x08003d38

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 f98d 	bl	8000804 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f82d 	bl	8000548 <SystemClock_Config>


	xTaskCreate(vTask1_Handler, "Blinky", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskBlinky);
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <main+0x3c>)
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2302      	movs	r3, #2
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2300      	movs	r3, #0
 80004f8:	2282      	movs	r2, #130	; 0x82
 80004fa:	4909      	ldr	r1, [pc, #36]	; (8000520 <main+0x40>)
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0x44>)
 80004fe:	f001 fe6b 	bl	80021d8 <xTaskCreate>
	xTaskCreate(vTask2_Handler, "Blinky1", configMINIMAL_STACK_SIZE, NULL, 2, &xTaskBlinky1);
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <main+0x48>)
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	2302      	movs	r3, #2
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2300      	movs	r3, #0
 800050c:	2282      	movs	r2, #130	; 0x82
 800050e:	4907      	ldr	r1, [pc, #28]	; (800052c <main+0x4c>)
 8000510:	4807      	ldr	r0, [pc, #28]	; (8000530 <main+0x50>)
 8000512:	f001 fe61 	bl	80021d8 <xTaskCreate>

	vTaskStartScheduler();
 8000516:	f001 ff9d 	bl	8002454 <vTaskStartScheduler>


  /* Infinite loop */
  while (1) {
 800051a:	e7fe      	b.n	800051a <main+0x3a>
 800051c:	2000002c 	.word	0x2000002c
 8000520:	08003d50 	.word	0x08003d50
 8000524:	08000535 	.word	0x08000535
 8000528:	20000030 	.word	0x20000030
 800052c:	08003d58 	.word	0x08003d58
 8000530:	0800053f 	.word	0x0800053f

08000534 <vTask1_Handler>:
  }

}

void vTask1_Handler(void *params)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	while(1) {
 800053c:	e7fe      	b.n	800053c <vTask1_Handler+0x8>

0800053e <vTask2_Handler>:
	}
}

void vTask2_Handler(void *params)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
	while(1) {
 8000546:	e7fe      	b.n	8000546 <vTask2_Handler+0x8>

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 fbe5 	bl	8003d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b23      	ldr	r3, [pc, #140]	; (8000600 <SystemClock_Config+0xb8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a22      	ldr	r2, [pc, #136]	; (8000600 <SystemClock_Config+0xb8>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b20      	ldr	r3, [pc, #128]	; (8000600 <SystemClock_Config+0xb8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <SystemClock_Config+0xbc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000594:	4a1b      	ldr	r2, [pc, #108]	; (8000604 <SystemClock_Config+0xbc>)
 8000596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <SystemClock_Config+0xbc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fa45 	bl	8000a4c <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c8:	f000 f830 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fca0 	bl	8000f2c <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005f2:	f000 f81b 	bl	800062c <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d101      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800061a:	f000 f915 	bl	8000848 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40014000 	.word	0x40014000

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <HAL_MspInit+0x4c>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <HAL_MspInit+0x4c>)
 800064c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000650:	6453      	str	r3, [r2, #68]	; 0x44
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_MspInit+0x4c>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_MspInit+0x4c>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <HAL_MspInit+0x4c>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	6413      	str	r3, [r2, #64]	; 0x40
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x4c>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800

0800068c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0); 
 800069c:	2200      	movs	r2, #0
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	2018      	movs	r0, #24
 80006a2:	f000 f9a9 	bl	80009f8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn); 
 80006a6:	2018      	movs	r0, #24
 80006a8:	f000 f9c2 	bl	8000a30 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <HAL_InitTick+0xa0>)
 80006b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b4:	4a1d      	ldr	r2, [pc, #116]	; (800072c <HAL_InitTick+0xa0>)
 80006b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ba:	6453      	str	r3, [r2, #68]	; 0x44
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <HAL_InitTick+0xa0>)
 80006be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c8:	f107 0210 	add.w	r2, r7, #16
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fde2 	bl	800129c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM9 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006d8:	f000 fdcc 	bl	8001274 <HAL_RCC_GetPCLK2Freq>
 80006dc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80006de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <HAL_InitTick+0xa4>)
 80006e2:	fba2 2303 	umull	r2, r3, r2, r3
 80006e6:	0c9b      	lsrs	r3, r3, #18
 80006e8:	3b01      	subs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <HAL_InitTick+0xa8>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <HAL_InitTick+0xac>)
 80006f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000 / 1000) - 1;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_InitTick+0xa8>)
 80006f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006f8:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80006fa:	4a0e      	ldr	r2, [pc, #56]	; (8000734 <HAL_InitTick+0xa8>)
 80006fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006fe:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <HAL_InitTick+0xa8>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <HAL_InitTick+0xa8>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <HAL_InitTick+0xa8>)
 800070e:	f000 fdf7 	bl	8001300 <HAL_TIM_Base_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d104      	bne.n	8000722 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8000718:	4806      	ldr	r0, [pc, #24]	; (8000734 <HAL_InitTick+0xa8>)
 800071a:	f000 fe26 	bl	800136a <HAL_TIM_Base_Start_IT>
 800071e:	4603      	mov	r3, r0
 8000720:	e000      	b.n	8000724 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000722:	2301      	movs	r3, #1
}
 8000724:	4618      	mov	r0, r3
 8000726:	3730      	adds	r7, #48	; 0x30
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	431bde83 	.word	0x431bde83
 8000734:	20012d9c 	.word	0x20012d9c
 8000738:	40014000 	.word	0x40014000

0800073c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <MemManage_Handler+0x4>

08000756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <BusFault_Handler+0x4>

0800075c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <UsageFault_Handler+0x4>

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000774:	4802      	ldr	r0, [pc, #8]	; (8000780 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000776:	f000 fe1c 	bl	80013b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20012d9c 	.word	0x20012d9c

08000784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <SystemInit+0x28>)
 800078a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078e:	4a07      	ldr	r2, [pc, #28]	; (80007ac <SystemInit+0x28>)
 8000790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SystemInit+0x28>)
 800079a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800079e:	609a      	str	r2, [r3, #8]
#endif
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80007b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007b6:	e003      	b.n	80007c0 <LoopCopyDataInit>

080007b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007be:	3104      	adds	r1, #4

080007c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007c8:	d3f6      	bcc.n	80007b8 <CopyDataInit>
  ldr  r2, =_sbss
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007cc:	e002      	b.n	80007d4 <LoopFillZerobss>

080007ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007d0:	f842 3b04 	str.w	r3, [r2], #4

080007d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80007d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007d8:	d3f9      	bcc.n	80007ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007da:	f7ff ffd3 	bl	8000784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007de:	f003 fa73 	bl	8003cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e2:	f7ff fe7d 	bl	80004e0 <main>
  bx  lr    
 80007e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80007e8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80007ec:	08003da0 	.word	0x08003da0
  ldr  r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007f4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80007f8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80007fc:	20012e20 	.word	0x20012e20

08000800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000800:	e7fe      	b.n	8000800 <ADC_IRQHandler>
	...

08000804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <HAL_Init+0x40>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <HAL_Init+0x40>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_Init+0x40>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_Init+0x40>)
 800081a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800081e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_Init+0x40>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_Init+0x40>)
 8000826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800082a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800082c:	2003      	movs	r0, #3
 800082e:	f000 f8d8 	bl	80009e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff ff2a 	bl	800068c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000838:	f7ff ff00 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023c00 	.word	0x40023c00

08000848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_IncTick+0x20>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	461a      	mov	r2, r3
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_IncTick+0x24>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4413      	add	r3, r2
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <HAL_IncTick+0x24>)
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008
 800086c:	20012ddc 	.word	0x20012ddc

08000870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <HAL_GetTick+0x14>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20012ddc 	.word	0x20012ddc

08000888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f003 0307 	and.w	r3, r3, #7
 8000896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ba:	4a04      	ldr	r2, [pc, #16]	; (80008cc <__NVIC_SetPriorityGrouping+0x44>)
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	60d3      	str	r3, [r2, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <__NVIC_GetPriorityGrouping+0x18>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	0a1b      	lsrs	r3, r3, #8
 80008da:	f003 0307 	and.w	r3, r3, #7
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	db0b      	blt.n	8000916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	f003 021f 	and.w	r2, r3, #31
 8000904:	4907      	ldr	r1, [pc, #28]	; (8000924 <__NVIC_EnableIRQ+0x38>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	095b      	lsrs	r3, r3, #5
 800090c:	2001      	movs	r0, #1
 800090e:	fa00 f202 	lsl.w	r2, r0, r2
 8000912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	; (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	; (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	; 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	; 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ff4c 	bl	8000888 <__NVIC_SetPriorityGrouping>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a0a:	f7ff ff61 	bl	80008d0 <__NVIC_GetPriorityGrouping>
 8000a0e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	68b9      	ldr	r1, [r7, #8]
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f7ff ffb1 	bl	800097c <NVIC_EncodePriority>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff80 	bl	8000928 <__NVIC_SetPriority>
}
 8000a28:	bf00      	nop
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff54 	bl	80008ec <__NVIC_EnableIRQ>
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e25b      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d075      	beq.n	8000b56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a6a:	4ba3      	ldr	r3, [pc, #652]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f003 030c 	and.w	r3, r3, #12
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	d00c      	beq.n	8000a90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a76:	4ba0      	ldr	r3, [pc, #640]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a7e:	2b08      	cmp	r3, #8
 8000a80:	d112      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a82:	4b9d      	ldr	r3, [pc, #628]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a8e:	d10b      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a90:	4b99      	ldr	r3, [pc, #612]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d05b      	beq.n	8000b54 <HAL_RCC_OscConfig+0x108>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d157      	bne.n	8000b54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e236      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ab0:	d106      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x74>
 8000ab2:	4b91      	ldr	r3, [pc, #580]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a90      	ldr	r2, [pc, #576]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e01d      	b.n	8000afc <HAL_RCC_OscConfig+0xb0>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ac8:	d10c      	bne.n	8000ae4 <HAL_RCC_OscConfig+0x98>
 8000aca:	4b8b      	ldr	r3, [pc, #556]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a8a      	ldr	r2, [pc, #552]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	4b88      	ldr	r3, [pc, #544]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a87      	ldr	r2, [pc, #540]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	e00b      	b.n	8000afc <HAL_RCC_OscConfig+0xb0>
 8000ae4:	4b84      	ldr	r3, [pc, #528]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a83      	ldr	r2, [pc, #524]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	4b81      	ldr	r3, [pc, #516]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a80      	ldr	r2, [pc, #512]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d013      	beq.n	8000b2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b04:	f7ff feb4 	bl	8000870 <HAL_GetTick>
 8000b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b0a:	e008      	b.n	8000b1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0c:	f7ff feb0 	bl	8000870 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b64      	cmp	r3, #100	; 0x64
 8000b18:	d901      	bls.n	8000b1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e1fb      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b1e:	4b76      	ldr	r3, [pc, #472]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0f0      	beq.n	8000b0c <HAL_RCC_OscConfig+0xc0>
 8000b2a:	e014      	b.n	8000b56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b2c:	f7ff fea0 	bl	8000870 <HAL_GetTick>
 8000b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b32:	e008      	b.n	8000b46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b34:	f7ff fe9c 	bl	8000870 <HAL_GetTick>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	2b64      	cmp	r3, #100	; 0x64
 8000b40:	d901      	bls.n	8000b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e1e7      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b46:	4b6c      	ldr	r3, [pc, #432]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1f0      	bne.n	8000b34 <HAL_RCC_OscConfig+0xe8>
 8000b52:	e000      	b.n	8000b56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d063      	beq.n	8000c2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b62:	4b65      	ldr	r3, [pc, #404]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	f003 030c 	and.w	r3, r3, #12
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d00b      	beq.n	8000b86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b6e:	4b62      	ldr	r3, [pc, #392]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d11c      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b7a:	4b5f      	ldr	r3, [pc, #380]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d116      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b86:	4b5c      	ldr	r3, [pc, #368]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d005      	beq.n	8000b9e <HAL_RCC_OscConfig+0x152>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d001      	beq.n	8000b9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e1bb      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b9e:	4b56      	ldr	r3, [pc, #344]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	4952      	ldr	r1, [pc, #328]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bb2:	e03a      	b.n	8000c2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d020      	beq.n	8000bfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bbc:	4b4f      	ldr	r3, [pc, #316]	; (8000cfc <HAL_RCC_OscConfig+0x2b0>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bc2:	f7ff fe55 	bl	8000870 <HAL_GetTick>
 8000bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc8:	e008      	b.n	8000bdc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bca:	f7ff fe51 	bl	8000870 <HAL_GetTick>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d901      	bls.n	8000bdc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e19c      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bdc:	4b46      	ldr	r3, [pc, #280]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f0      	beq.n	8000bca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be8:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	4940      	ldr	r1, [pc, #256]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	600b      	str	r3, [r1, #0]
 8000bfc:	e015      	b.n	8000c2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <HAL_RCC_OscConfig+0x2b0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c04:	f7ff fe34 	bl	8000870 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0c:	f7ff fe30 	bl	8000870 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e17b      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c1e:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f0      	bne.n	8000c0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d030      	beq.n	8000c98 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d016      	beq.n	8000c6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <HAL_RCC_OscConfig+0x2b4>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c44:	f7ff fe14 	bl	8000870 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c4c:	f7ff fe10 	bl	8000870 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e15b      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c5e:	4b26      	ldr	r3, [pc, #152]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f0      	beq.n	8000c4c <HAL_RCC_OscConfig+0x200>
 8000c6a:	e015      	b.n	8000c98 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c6c:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <HAL_RCC_OscConfig+0x2b4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c72:	f7ff fdfd 	bl	8000870 <HAL_GetTick>
 8000c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c78:	e008      	b.n	8000c8c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fdf9 	bl	8000870 <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e144      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1f0      	bne.n	8000c7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 80a0 	beq.w	8000de6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10f      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <HAL_RCC_OscConfig+0x2ac>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_RCC_OscConfig+0x2b8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d121      	bne.n	8000d26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_RCC_OscConfig+0x2b8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_RCC_OscConfig+0x2b8>)
 8000ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cee:	f7ff fdbf 	bl	8000870 <HAL_GetTick>
 8000cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf4:	e011      	b.n	8000d1a <HAL_RCC_OscConfig+0x2ce>
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	42470000 	.word	0x42470000
 8000d00:	42470e80 	.word	0x42470e80
 8000d04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d08:	f7ff fdb2 	bl	8000870 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e0fd      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d1a:	4b81      	ldr	r3, [pc, #516]	; (8000f20 <HAL_RCC_OscConfig+0x4d4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d106      	bne.n	8000d3c <HAL_RCC_OscConfig+0x2f0>
 8000d2e:	4b7d      	ldr	r3, [pc, #500]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d32:	4a7c      	ldr	r2, [pc, #496]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6713      	str	r3, [r2, #112]	; 0x70
 8000d3a:	e01c      	b.n	8000d76 <HAL_RCC_OscConfig+0x32a>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	2b05      	cmp	r3, #5
 8000d42:	d10c      	bne.n	8000d5e <HAL_RCC_OscConfig+0x312>
 8000d44:	4b77      	ldr	r3, [pc, #476]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d48:	4a76      	ldr	r2, [pc, #472]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8000d50:	4b74      	ldr	r3, [pc, #464]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d54:	4a73      	ldr	r2, [pc, #460]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8000d5c:	e00b      	b.n	8000d76 <HAL_RCC_OscConfig+0x32a>
 8000d5e:	4b71      	ldr	r3, [pc, #452]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d62:	4a70      	ldr	r2, [pc, #448]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d64:	f023 0301 	bic.w	r3, r3, #1
 8000d68:	6713      	str	r3, [r2, #112]	; 0x70
 8000d6a:	4b6e      	ldr	r3, [pc, #440]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d6e:	4a6d      	ldr	r2, [pc, #436]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d70:	f023 0304 	bic.w	r3, r3, #4
 8000d74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d015      	beq.n	8000daa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fd77 	bl	8000870 <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d84:	e00a      	b.n	8000d9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d86:	f7ff fd73 	bl	8000870 <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e0bc      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d9c:	4b61      	ldr	r3, [pc, #388]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0ee      	beq.n	8000d86 <HAL_RCC_OscConfig+0x33a>
 8000da8:	e014      	b.n	8000dd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000daa:	f7ff fd61 	bl	8000870 <HAL_GetTick>
 8000dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db0:	e00a      	b.n	8000dc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000db2:	f7ff fd5d 	bl	8000870 <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e0a6      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dc8:	4b56      	ldr	r3, [pc, #344]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1ee      	bne.n	8000db2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d105      	bne.n	8000de6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dda:	4b52      	ldr	r3, [pc, #328]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a51      	ldr	r2, [pc, #324]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 8092 	beq.w	8000f14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000df0:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 030c 	and.w	r3, r3, #12
 8000df8:	2b08      	cmp	r3, #8
 8000dfa:	d05c      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d141      	bne.n	8000e88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e04:	4b48      	ldr	r3, [pc, #288]	; (8000f28 <HAL_RCC_OscConfig+0x4dc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fd31 	bl	8000870 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e12:	f7ff fd2d 	bl	8000870 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e078      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e24:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f0      	bne.n	8000e12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69da      	ldr	r2, [r3, #28]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	019b      	lsls	r3, r3, #6
 8000e40:	431a      	orrs	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	085b      	lsrs	r3, r3, #1
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	041b      	lsls	r3, r3, #16
 8000e4c:	431a      	orrs	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	061b      	lsls	r3, r3, #24
 8000e54:	4933      	ldr	r1, [pc, #204]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e5a:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <HAL_RCC_OscConfig+0x4dc>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fd06 	bl	8000870 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e68:	f7ff fd02 	bl	8000870 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e04d      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e7a:	4b2a      	ldr	r3, [pc, #168]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f0      	beq.n	8000e68 <HAL_RCC_OscConfig+0x41c>
 8000e86:	e045      	b.n	8000f14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <HAL_RCC_OscConfig+0x4dc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fcef 	bl	8000870 <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fceb 	bl	8000870 <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e036      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_OscConfig+0x44a>
 8000eb4:	e02e      	b.n	8000f14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e029      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_RCC_OscConfig+0x4d8>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d11c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d115      	bne.n	8000f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000eea:	4013      	ands	r3, r2
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d10d      	bne.n	8000f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d106      	bne.n	8000f10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d001      	beq.n	8000f14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40007000 	.word	0x40007000
 8000f24:	40023800 	.word	0x40023800
 8000f28:	42470060 	.word	0x42470060

08000f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0cc      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 030f 	and.w	r3, r3, #15
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d90c      	bls.n	8000f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4e:	4b65      	ldr	r3, [pc, #404]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f50:	683a      	ldr	r2, [r7, #0]
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f56:	4b63      	ldr	r3, [pc, #396]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d001      	beq.n	8000f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e0b8      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d020      	beq.n	8000fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f80:	4b59      	ldr	r3, [pc, #356]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4a58      	ldr	r2, [pc, #352]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f98:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa4:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	494d      	ldr	r1, [pc, #308]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d044      	beq.n	800104c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d107      	bne.n	8000fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fca:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d119      	bne.n	800100a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e07f      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d003      	beq.n	8000fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d107      	bne.n	8000ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fea:	4b3f      	ldr	r3, [pc, #252]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e06f      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e067      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f023 0203 	bic.w	r2, r3, #3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4934      	ldr	r1, [pc, #208]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001018:	4313      	orrs	r3, r2
 800101a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800101c:	f7ff fc28 	bl	8000870 <HAL_GetTick>
 8001020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001022:	e00a      	b.n	800103a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001024:	f7ff fc24 	bl	8000870 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001032:	4293      	cmp	r3, r2
 8001034:	d901      	bls.n	800103a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e04f      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 020c 	and.w	r2, r3, #12
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	429a      	cmp	r2, r3
 800104a:	d1eb      	bne.n	8001024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800104c:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 030f 	and.w	r3, r3, #15
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d20c      	bcs.n	8001074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e032      	b.n	80010da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d008      	beq.n	8001092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4916      	ldr	r1, [pc, #88]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 800108e:	4313      	orrs	r3, r2
 8001090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d009      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	490e      	ldr	r1, [pc, #56]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010b2:	f000 f821 	bl	80010f8 <HAL_RCC_GetSysClockFreq>
 80010b6:	4601      	mov	r1, r0
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_RCC_ClockConfig+0x1c0>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	fa21 f303 	lsr.w	r3, r1, r3
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <HAL_RCC_ClockConfig+0x1c8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fada 	bl	800068c <HAL_InitTick>

  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023c00 	.word	0x40023c00
 80010e8:	40023800 	.word	0x40023800
 80010ec:	08003d78 	.word	0x08003d78
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800110e:	4b50      	ldr	r3, [pc, #320]	; (8001250 <HAL_RCC_GetSysClockFreq+0x158>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d007      	beq.n	800112a <HAL_RCC_GetSysClockFreq+0x32>
 800111a:	2b08      	cmp	r3, #8
 800111c:	d008      	beq.n	8001130 <HAL_RCC_GetSysClockFreq+0x38>
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 808d 	bne.w	800123e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001124:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001126:	60bb      	str	r3, [r7, #8]
       break;
 8001128:	e08c      	b.n	8001244 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800112a:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <HAL_RCC_GetSysClockFreq+0x160>)
 800112c:	60bb      	str	r3, [r7, #8]
      break;
 800112e:	e089      	b.n	8001244 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_RCC_GetSysClockFreq+0x158>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001138:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800113a:	4b45      	ldr	r3, [pc, #276]	; (8001250 <HAL_RCC_GetSysClockFreq+0x158>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d023      	beq.n	800118e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <HAL_RCC_GetSysClockFreq+0x158>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	099b      	lsrs	r3, r3, #6
 800114c:	f04f 0400 	mov.w	r4, #0
 8001150:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	ea03 0501 	and.w	r5, r3, r1
 800115c:	ea04 0602 	and.w	r6, r4, r2
 8001160:	4a3d      	ldr	r2, [pc, #244]	; (8001258 <HAL_RCC_GetSysClockFreq+0x160>)
 8001162:	fb02 f106 	mul.w	r1, r2, r6
 8001166:	2200      	movs	r2, #0
 8001168:	fb02 f205 	mul.w	r2, r2, r5
 800116c:	440a      	add	r2, r1
 800116e:	493a      	ldr	r1, [pc, #232]	; (8001258 <HAL_RCC_GetSysClockFreq+0x160>)
 8001170:	fba5 0101 	umull	r0, r1, r5, r1
 8001174:	1853      	adds	r3, r2, r1
 8001176:	4619      	mov	r1, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f04f 0400 	mov.w	r4, #0
 800117e:	461a      	mov	r2, r3
 8001180:	4623      	mov	r3, r4
 8001182:	f7ff f82d 	bl	80001e0 <__aeabi_uldivmod>
 8001186:	4603      	mov	r3, r0
 8001188:	460c      	mov	r4, r1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	e049      	b.n	8001222 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800118e:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_RCC_GetSysClockFreq+0x158>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	099b      	lsrs	r3, r3, #6
 8001194:	f04f 0400 	mov.w	r4, #0
 8001198:	f240 11ff 	movw	r1, #511	; 0x1ff
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	ea03 0501 	and.w	r5, r3, r1
 80011a4:	ea04 0602 	and.w	r6, r4, r2
 80011a8:	4629      	mov	r1, r5
 80011aa:	4632      	mov	r2, r6
 80011ac:	f04f 0300 	mov.w	r3, #0
 80011b0:	f04f 0400 	mov.w	r4, #0
 80011b4:	0154      	lsls	r4, r2, #5
 80011b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ba:	014b      	lsls	r3, r1, #5
 80011bc:	4619      	mov	r1, r3
 80011be:	4622      	mov	r2, r4
 80011c0:	1b49      	subs	r1, r1, r5
 80011c2:	eb62 0206 	sbc.w	r2, r2, r6
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	f04f 0400 	mov.w	r4, #0
 80011ce:	0194      	lsls	r4, r2, #6
 80011d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80011d4:	018b      	lsls	r3, r1, #6
 80011d6:	1a5b      	subs	r3, r3, r1
 80011d8:	eb64 0402 	sbc.w	r4, r4, r2
 80011dc:	f04f 0100 	mov.w	r1, #0
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	00e2      	lsls	r2, r4, #3
 80011e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80011ea:	00d9      	lsls	r1, r3, #3
 80011ec:	460b      	mov	r3, r1
 80011ee:	4614      	mov	r4, r2
 80011f0:	195b      	adds	r3, r3, r5
 80011f2:	eb44 0406 	adc.w	r4, r4, r6
 80011f6:	f04f 0100 	mov.w	r1, #0
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	02a2      	lsls	r2, r4, #10
 8001200:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001204:	0299      	lsls	r1, r3, #10
 8001206:	460b      	mov	r3, r1
 8001208:	4614      	mov	r4, r2
 800120a:	4618      	mov	r0, r3
 800120c:	4621      	mov	r1, r4
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f04f 0400 	mov.w	r4, #0
 8001214:	461a      	mov	r2, r3
 8001216:	4623      	mov	r3, r4
 8001218:	f7fe ffe2 	bl	80001e0 <__aeabi_uldivmod>
 800121c:	4603      	mov	r3, r0
 800121e:	460c      	mov	r4, r1
 8001220:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_RCC_GetSysClockFreq+0x158>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	0c1b      	lsrs	r3, r3, #16
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	3301      	adds	r3, #1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	60bb      	str	r3, [r7, #8]
      break;
 800123c:	e002      	b.n	8001244 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800123e:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001240:	60bb      	str	r3, [r7, #8]
      break;
 8001242:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001244:	68bb      	ldr	r3, [r7, #8]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	00f42400 	.word	0x00f42400
 8001258:	017d7840 	.word	0x017d7840

0800125c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_RCC_GetHCLKFreq+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000

08001274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001278:	f7ff fff0 	bl	800125c <HAL_RCC_GetHCLKFreq>
 800127c:	4601      	mov	r1, r0
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	0b5b      	lsrs	r3, r3, #13
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	4a03      	ldr	r2, [pc, #12]	; (8001298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800128a:	5cd3      	ldrb	r3, [r2, r3]
 800128c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	08003d88 	.word	0x08003d88

0800129c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	220f      	movs	r2, #15
 80012aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_RCC_GetClockConfig+0x5c>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0203 	and.w	r2, r3, #3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_RCC_GetClockConfig+0x5c>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_RCC_GetClockConfig+0x5c>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_RCC_GetClockConfig+0x5c>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	08db      	lsrs	r3, r3, #3
 80012d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_RCC_GetClockConfig+0x60>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 020f 	and.w	r2, r3, #15
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	601a      	str	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40023c00 	.word	0x40023c00

08001300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e01d      	b.n	800134e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f815 	bl	8001356 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2202      	movs	r2, #2
 8001330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3304      	adds	r3, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4610      	mov	r0, r2
 8001340:	f000 f968 	bl	8001614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800136a:	b480      	push	{r7}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0201 	orr.w	r2, r2, #1
 8001380:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2b06      	cmp	r3, #6
 8001392:	d007      	beq.n	80013a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d122      	bne.n	800140e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d11b      	bne.n	800140e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f06f 0202 	mvn.w	r2, #2
 80013de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f8ee 	bl	80015d6 <HAL_TIM_IC_CaptureCallback>
 80013fa:	e005      	b.n	8001408 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f000 f8e0 	bl	80015c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f8f1 	bl	80015ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b04      	cmp	r3, #4
 800141a:	d122      	bne.n	8001462 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	2b04      	cmp	r3, #4
 8001428:	d11b      	bne.n	8001462 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f06f 0204 	mvn.w	r2, #4
 8001432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f8c4 	bl	80015d6 <HAL_TIM_IC_CaptureCallback>
 800144e:	e005      	b.n	800145c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f8b6 	bl	80015c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f8c7 	bl	80015ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	2b08      	cmp	r3, #8
 800146e:	d122      	bne.n	80014b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b08      	cmp	r3, #8
 800147c:	d11b      	bne.n	80014b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f06f 0208 	mvn.w	r2, #8
 8001486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2204      	movs	r2, #4
 800148c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f89a 	bl	80015d6 <HAL_TIM_IC_CaptureCallback>
 80014a2:	e005      	b.n	80014b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f88c 	bl	80015c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f89d 	bl	80015ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b10      	cmp	r3, #16
 80014c2:	d122      	bne.n	800150a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 0310 	and.w	r3, r3, #16
 80014ce:	2b10      	cmp	r3, #16
 80014d0:	d11b      	bne.n	800150a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f06f 0210 	mvn.w	r2, #16
 80014da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2208      	movs	r2, #8
 80014e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f870 	bl	80015d6 <HAL_TIM_IC_CaptureCallback>
 80014f6:	e005      	b.n	8001504 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f862 	bl	80015c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f873 	bl	80015ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b01      	cmp	r3, #1
 8001516:	d10e      	bne.n	8001536 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f06f 0201 	mvn.w	r2, #1
 800152e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff f869 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001540:	2b80      	cmp	r3, #128	; 0x80
 8001542:	d10e      	bne.n	8001562 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154e:	2b80      	cmp	r3, #128	; 0x80
 8001550:	d107      	bne.n	8001562 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800155a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f8e3 	bl	8001728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156c:	2b40      	cmp	r3, #64	; 0x40
 800156e:	d10e      	bne.n	800158e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157a:	2b40      	cmp	r3, #64	; 0x40
 800157c:	d107      	bne.n	800158e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f838 	bl	80015fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	f003 0320 	and.w	r3, r3, #32
 8001598:	2b20      	cmp	r3, #32
 800159a:	d10e      	bne.n	80015ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f003 0320 	and.w	r3, r3, #32
 80015a6:	2b20      	cmp	r3, #32
 80015a8:	d107      	bne.n	80015ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f06f 0220 	mvn.w	r2, #32
 80015b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f8ad 	bl	8001714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a34      	ldr	r2, [pc, #208]	; (80016f8 <TIM_Base_SetConfig+0xe4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00f      	beq.n	800164c <TIM_Base_SetConfig+0x38>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001632:	d00b      	beq.n	800164c <TIM_Base_SetConfig+0x38>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a31      	ldr	r2, [pc, #196]	; (80016fc <TIM_Base_SetConfig+0xe8>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d007      	beq.n	800164c <TIM_Base_SetConfig+0x38>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a30      	ldr	r2, [pc, #192]	; (8001700 <TIM_Base_SetConfig+0xec>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d003      	beq.n	800164c <TIM_Base_SetConfig+0x38>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a2f      	ldr	r2, [pc, #188]	; (8001704 <TIM_Base_SetConfig+0xf0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d108      	bne.n	800165e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a25      	ldr	r2, [pc, #148]	; (80016f8 <TIM_Base_SetConfig+0xe4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d01b      	beq.n	800169e <TIM_Base_SetConfig+0x8a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800166c:	d017      	beq.n	800169e <TIM_Base_SetConfig+0x8a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a22      	ldr	r2, [pc, #136]	; (80016fc <TIM_Base_SetConfig+0xe8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d013      	beq.n	800169e <TIM_Base_SetConfig+0x8a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a21      	ldr	r2, [pc, #132]	; (8001700 <TIM_Base_SetConfig+0xec>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00f      	beq.n	800169e <TIM_Base_SetConfig+0x8a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a20      	ldr	r2, [pc, #128]	; (8001704 <TIM_Base_SetConfig+0xf0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00b      	beq.n	800169e <TIM_Base_SetConfig+0x8a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <TIM_Base_SetConfig+0xf4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <TIM_Base_SetConfig+0x8a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a1e      	ldr	r2, [pc, #120]	; (800170c <TIM_Base_SetConfig+0xf8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d003      	beq.n	800169e <TIM_Base_SetConfig+0x8a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <TIM_Base_SetConfig+0xfc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d108      	bne.n	80016b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <TIM_Base_SetConfig+0xe4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d103      	bne.n	80016e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	615a      	str	r2, [r3, #20]
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40010000 	.word	0x40010000
 80016fc:	40000400 	.word	0x40000400
 8001700:	40000800 	.word	0x40000800
 8001704:	40000c00 	.word	0x40000c00
 8001708:	40014000 	.word	0x40014000
 800170c:	40014400 	.word	0x40014400
 8001710:	40014800 	.word	0x40014800

08001714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f103 0208 	add.w	r2, r3, #8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001754:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f103 0208 	add.w	r2, r3, #8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f103 0208 	add.w	r2, r3, #8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001796:	b480      	push	{r7}
 8001798:	b085      	sub	sp, #20
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017f4:	d103      	bne.n	80017fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e00c      	b.n	8001818 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3308      	adds	r3, #8
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e002      	b.n	800180c <vListInsert+0x2e>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d2f6      	bcs.n	8001806 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6892      	ldr	r2, [r2, #8]
 8001866:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6852      	ldr	r2, [r2, #4]
 8001870:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d103      	bne.n	8001884 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	1e5a      	subs	r2, r3, #1
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80018b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018bc:	f383 8811 	msr	BASEPRI, r3
 80018c0:	f3bf 8f6f 	isb	sy
 80018c4:	f3bf 8f4f 	dsb	sy
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	e7fe      	b.n	80018ca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80018cc:	f001 fefe 	bl	80036cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d8:	68f9      	ldr	r1, [r7, #12]
 80018da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80018dc:	fb01 f303 	mul.w	r3, r1, r3
 80018e0:	441a      	add	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fc:	3b01      	subs	r3, #1
 80018fe:	68f9      	ldr	r1, [r7, #12]
 8001900:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	441a      	add	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	22ff      	movs	r2, #255	; 0xff
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	22ff      	movs	r2, #255	; 0xff
 8001918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d114      	bne.n	800194c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d01a      	beq.n	8001960 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3310      	adds	r3, #16
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fff6 	bl	8002920 <xTaskRemoveFromEventList>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d012      	beq.n	8001960 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <xQueueGenericReset+0xcc>)
 800193c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	f3bf 8f4f 	dsb	sy
 8001946:	f3bf 8f6f 	isb	sy
 800194a:	e009      	b.n	8001960 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	3310      	adds	r3, #16
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fef3 	bl	800173c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3324      	adds	r3, #36	; 0x24
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff feee 	bl	800173c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001960:	f001 fee2 	bl	8003728 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000ed04 	.word	0xe000ed04

08001974 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	4613      	mov	r3, r2
 8001980:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d109      	bne.n	800199c <xQueueGenericCreate+0x28>
 8001988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198c:	f383 8811 	msr	BASEPRI, r3
 8001990:	f3bf 8f6f 	isb	sy
 8001994:	f3bf 8f4f 	dsb	sy
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	e7fe      	b.n	800199a <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3350      	adds	r3, #80	; 0x50
 80019aa:	4618      	mov	r0, r3
 80019ac:	f001 ffa8 	bl	8003900 <pvPortMalloc>
 80019b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00d      	beq.n	80019d4 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3350      	adds	r3, #80	; 0x50
 80019c0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f805 	bl	80019de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80019d4:	69bb      	ldr	r3, [r7, #24]
	}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d103      	bne.n	80019fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e002      	b.n	8001a00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	69b8      	ldr	r0, [r7, #24]
 8001a10:	f7ff ff48 	bl	80018a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	78fa      	ldrb	r2, [r7, #3]
 8001a18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08e      	sub	sp, #56	; 0x38
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001a32:	2300      	movs	r3, #0
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d109      	bne.n	8001a54 <xQueueGenericSend+0x30>
 8001a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a44:	f383 8811 	msr	BASEPRI, r3
 8001a48:	f3bf 8f6f 	isb	sy
 8001a4c:	f3bf 8f4f 	dsb	sy
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a52:	e7fe      	b.n	8001a52 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d103      	bne.n	8001a62 <xQueueGenericSend+0x3e>
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <xQueueGenericSend+0x42>
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <xQueueGenericSend+0x44>
 8001a66:	2300      	movs	r3, #0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <xQueueGenericSend+0x5c>
 8001a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a70:	f383 8811 	msr	BASEPRI, r3
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	f3bf 8f4f 	dsb	sy
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7e:	e7fe      	b.n	8001a7e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d103      	bne.n	8001a8e <xQueueGenericSend+0x6a>
 8001a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <xQueueGenericSend+0x6e>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <xQueueGenericSend+0x70>
 8001a92:	2300      	movs	r3, #0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <xQueueGenericSend+0x88>
 8001a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a9c:	f383 8811 	msr	BASEPRI, r3
 8001aa0:	f3bf 8f6f 	isb	sy
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	623b      	str	r3, [r7, #32]
 8001aaa:	e7fe      	b.n	8001aaa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001aac:	f001 f8d0 	bl	8002c50 <xTaskGetSchedulerState>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d102      	bne.n	8001abc <xQueueGenericSend+0x98>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <xQueueGenericSend+0x9c>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <xQueueGenericSend+0x9e>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <xQueueGenericSend+0xb6>
 8001ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aca:	f383 8811 	msr	BASEPRI, r3
 8001ace:	f3bf 8f6f 	isb	sy
 8001ad2:	f3bf 8f4f 	dsb	sy
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	e7fe      	b.n	8001ad8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ada:	f001 fdf7 	bl	80036cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d302      	bcc.n	8001af0 <xQueueGenericSend+0xcc>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d129      	bne.n	8001b44 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001af6:	f000 fa03 	bl	8001f00 <prvCopyDataToQueue>
 8001afa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d010      	beq.n	8001b26 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b06:	3324      	adds	r3, #36	; 0x24
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 ff09 	bl	8002920 <xTaskRemoveFromEventList>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001b14:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <xQueueGenericSend+0x1f0>)
 8001b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f3bf 8f4f 	dsb	sy
 8001b20:	f3bf 8f6f 	isb	sy
 8001b24:	e00a      	b.n	8001b3c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <xQueueGenericSend+0x1f0>)
 8001b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f3bf 8f4f 	dsb	sy
 8001b38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001b3c:	f001 fdf4 	bl	8003728 <vPortExitCritical>
				return pdPASS;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e063      	b.n	8001c0c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d103      	bne.n	8001b52 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001b4a:	f001 fded 	bl	8003728 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e05c      	b.n	8001c0c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d106      	bne.n	8001b66 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 ff41 	bl	80029e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001b62:	2301      	movs	r3, #1
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001b66:	f001 fddf 	bl	8003728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001b6a:	f000 fcbf 	bl	80024ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b6e:	f001 fdad 	bl	80036cc <vPortEnterCritical>
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b7e:	d103      	bne.n	8001b88 <xQueueGenericSend+0x164>
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b94:	d103      	bne.n	8001b9e <xQueueGenericSend+0x17a>
 8001b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b9e:	f001 fdc3 	bl	8003728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ba2:	1d3a      	adds	r2, r7, #4
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 ff30 	bl	8002a10 <xTaskCheckForTimeOut>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d124      	bne.n	8001c00 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001bb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bb8:	f000 fa9a 	bl	80020f0 <prvIsQueueFull>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d018      	beq.n	8001bf4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc4:	3310      	adds	r3, #16
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 fe5a 	bl	8002884 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bd2:	f000 fa25 	bl	8002020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001bd6:	f000 fc97 	bl	8002508 <xTaskResumeAll>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f47f af7c 	bne.w	8001ada <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <xQueueGenericSend+0x1f0>)
 8001be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	f3bf 8f4f 	dsb	sy
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	e772      	b.n	8001ada <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bf6:	f000 fa13 	bl	8002020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001bfa:	f000 fc85 	bl	8002508 <xTaskResumeAll>
 8001bfe:	e76c      	b.n	8001ada <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c02:	f000 fa0d 	bl	8002020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001c06:	f000 fc7f 	bl	8002508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001c0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3738      	adds	r7, #56	; 0x38
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	e000ed04 	.word	0xe000ed04

08001c18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b090      	sub	sp, #64	; 0x40
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d109      	bne.n	8001c44 <xQueueGenericSendFromISR+0x2c>
 8001c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c34:	f383 8811 	msr	BASEPRI, r3
 8001c38:	f3bf 8f6f 	isb	sy
 8001c3c:	f3bf 8f4f 	dsb	sy
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c42:	e7fe      	b.n	8001c42 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d103      	bne.n	8001c52 <xQueueGenericSendFromISR+0x3a>
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <xQueueGenericSendFromISR+0x3e>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <xQueueGenericSendFromISR+0x40>
 8001c56:	2300      	movs	r3, #0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d109      	bne.n	8001c70 <xQueueGenericSendFromISR+0x58>
 8001c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6e:	e7fe      	b.n	8001c6e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d103      	bne.n	8001c7e <xQueueGenericSendFromISR+0x66>
 8001c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <xQueueGenericSendFromISR+0x6a>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <xQueueGenericSendFromISR+0x6c>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <xQueueGenericSendFromISR+0x84>
 8001c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8c:	f383 8811 	msr	BASEPRI, r3
 8001c90:	f3bf 8f6f 	isb	sy
 8001c94:	f3bf 8f4f 	dsb	sy
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	e7fe      	b.n	8001c9a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c9c:	f001 fdf2 	bl	8003884 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ca0:	f3ef 8211 	mrs	r2, BASEPRI
 8001ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	61fa      	str	r2, [r7, #28]
 8001cb6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001cba:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d302      	bcc.n	8001cce <xQueueGenericSendFromISR+0xb6>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d12f      	bne.n	8001d2e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ce4:	f000 f90c 	bl	8001f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001ce8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf0:	d112      	bne.n	8001d18 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d016      	beq.n	8001d28 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfc:	3324      	adds	r3, #36	; 0x24
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fe0e 	bl	8002920 <xTaskRemoveFromEventList>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00e      	beq.n	8001d28 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e007      	b.n	8001d28 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001d18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	b25a      	sxtb	r2, r3
 8001d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001d2c:	e001      	b.n	8001d32 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3740      	adds	r7, #64	; 0x40
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <xQueueReceive+0x2e>
	__asm volatile
 8001d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d66:	f383 8811 	msr	BASEPRI, r3
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	e7fe      	b.n	8001d74 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d103      	bne.n	8001d84 <xQueueReceive+0x3c>
 8001d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <xQueueReceive+0x40>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <xQueueReceive+0x42>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <xQueueReceive+0x5a>
 8001d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d92:	f383 8811 	msr	BASEPRI, r3
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	f3bf 8f4f 	dsb	sy
 8001d9e:	61fb      	str	r3, [r7, #28]
 8001da0:	e7fe      	b.n	8001da0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001da2:	f000 ff55 	bl	8002c50 <xTaskGetSchedulerState>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <xQueueReceive+0x6a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <xQueueReceive+0x6e>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <xQueueReceive+0x70>
 8001db6:	2300      	movs	r3, #0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d109      	bne.n	8001dd0 <xQueueReceive+0x88>
 8001dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc0:	f383 8811 	msr	BASEPRI, r3
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	61bb      	str	r3, [r7, #24]
 8001dce:	e7fe      	b.n	8001dce <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001dd0:	f001 fc7c 	bl	80036cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01f      	beq.n	8001e20 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001de4:	f000 f8f6 	bl	8001fd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	1e5a      	subs	r2, r3, #1
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00f      	beq.n	8001e18 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfa:	3310      	adds	r3, #16
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fd8f 	bl	8002920 <xTaskRemoveFromEventList>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d007      	beq.n	8001e18 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001e08:	4b3c      	ldr	r3, [pc, #240]	; (8001efc <xQueueReceive+0x1b4>)
 8001e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001e18:	f001 fc86 	bl	8003728 <vPortExitCritical>
				return pdPASS;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e069      	b.n	8001ef4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d103      	bne.n	8001e2e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001e26:	f001 fc7f 	bl	8003728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e062      	b.n	8001ef4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fdd3 	bl	80029e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001e42:	f001 fc71 	bl	8003728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e46:	f000 fb51 	bl	80024ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e4a:	f001 fc3f 	bl	80036cc <vPortEnterCritical>
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e5a:	d103      	bne.n	8001e64 <xQueueReceive+0x11c>
 8001e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e6a:	b25b      	sxtb	r3, r3
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e70:	d103      	bne.n	8001e7a <xQueueReceive+0x132>
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e7a:	f001 fc55 	bl	8003728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e7e:	1d3a      	adds	r2, r7, #4
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fdc2 	bl	8002a10 <xTaskCheckForTimeOut>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d123      	bne.n	8001eda <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e94:	f000 f916 	bl	80020c4 <prvIsQueueEmpty>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d017      	beq.n	8001ece <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea0:	3324      	adds	r3, #36	; 0x24
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fcec 	bl	8002884 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001eae:	f000 f8b7 	bl	8002020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001eb2:	f000 fb29 	bl	8002508 <xTaskResumeAll>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d189      	bne.n	8001dd0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <xQueueReceive+0x1b4>)
 8001ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f3bf 8f4f 	dsb	sy
 8001ec8:	f3bf 8f6f 	isb	sy
 8001ecc:	e780      	b.n	8001dd0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ed0:	f000 f8a6 	bl	8002020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ed4:	f000 fb18 	bl	8002508 <xTaskResumeAll>
 8001ed8:	e77a      	b.n	8001dd0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001edc:	f000 f8a0 	bl	8002020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ee0:	f000 fb12 	bl	8002508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ee6:	f000 f8ed 	bl	80020c4 <prvIsQueueEmpty>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f43f af6f 	beq.w	8001dd0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001ef2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3730      	adds	r7, #48	; 0x30
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	e000ed04 	.word	0xe000ed04

08001f00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10d      	bne.n	8001f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d14d      	bne.n	8001fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 feae 	bl	8002c8c <xTaskPriorityDisinherit>
 8001f30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	e043      	b.n	8001fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d119      	bne.n	8001f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6858      	ldr	r0, [r3, #4]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	f001 fee0 	bl	8003d10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	441a      	add	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d32b      	bcc.n	8001fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	e026      	b.n	8001fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	68d8      	ldr	r0, [r3, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	f001 fec6 	bl	8003d10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	425b      	negs	r3, r3
 8001f8e:	441a      	add	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	425b      	negs	r3, r3
 8001faa:	441a      	add	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d105      	bne.n	8001fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001fca:	697b      	ldr	r3, [r7, #20]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d018      	beq.n	8002018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	441a      	add	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d303      	bcc.n	8002008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68d9      	ldr	r1, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	461a      	mov	r2, r3
 8002012:	6838      	ldr	r0, [r7, #0]
 8002014:	f001 fe7c 	bl	8003d10 <memcpy>
	}
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002028:	f001 fb50 	bl	80036cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002034:	e011      	b.n	800205a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3324      	adds	r3, #36	; 0x24
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fc6c 	bl	8002920 <xTaskRemoveFromEventList>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800204e:	f000 fd3f 	bl	8002ad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	3b01      	subs	r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800205a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	dce9      	bgt.n	8002036 <prvUnlockQueue+0x16>
 8002062:	e000      	b.n	8002066 <prvUnlockQueue+0x46>
					break;
 8002064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	22ff      	movs	r2, #255	; 0xff
 800206a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800206e:	f001 fb5b 	bl	8003728 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002072:	f001 fb2b 	bl	80036cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800207c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800207e:	e011      	b.n	80020a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d012      	beq.n	80020ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3310      	adds	r3, #16
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fc47 	bl	8002920 <xTaskRemoveFromEventList>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002098:	f000 fd1a 	bl	8002ad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800209c:	7bbb      	ldrb	r3, [r7, #14]
 800209e:	3b01      	subs	r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	dce9      	bgt.n	8002080 <prvUnlockQueue+0x60>
 80020ac:	e000      	b.n	80020b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80020ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	22ff      	movs	r2, #255	; 0xff
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80020b8:	f001 fb36 	bl	8003728 <vPortExitCritical>
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020cc:	f001 fafe 	bl	80036cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80020d8:	2301      	movs	r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e001      	b.n	80020e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80020e2:	f001 fb21 	bl	8003728 <vPortExitCritical>

	return xReturn;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020f8:	f001 fae8 	bl	80036cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	429a      	cmp	r2, r3
 8002106:	d102      	bne.n	800210e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002108:	2301      	movs	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	e001      	b.n	8002112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002112:	f001 fb09 	bl	8003728 <vPortExitCritical>

	return xReturn;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	e014      	b.n	800215a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002130:	4a0e      	ldr	r2, [pc, #56]	; (800216c <vQueueAddToRegistry+0x4c>)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800213c:	490b      	ldr	r1, [pc, #44]	; (800216c <vQueueAddToRegistry+0x4c>)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002146:	4a09      	ldr	r2, [pc, #36]	; (800216c <vQueueAddToRegistry+0x4c>)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002152:	e005      	b.n	8002160 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b07      	cmp	r3, #7
 800215e:	d9e7      	bls.n	8002130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	20012de0 	.word	0x20012de0

08002170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002180:	f001 faa4 	bl	80036cc <vPortEnterCritical>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800218a:	b25b      	sxtb	r3, r3
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002190:	d103      	bne.n	800219a <vQueueWaitForMessageRestricted+0x2a>
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a6:	d103      	bne.n	80021b0 <vQueueWaitForMessageRestricted+0x40>
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021b0:	f001 faba 	bl	8003728 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	3324      	adds	r3, #36	; 0x24
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fb81 	bl	80028cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff28 	bl	8002020 <prvUnlockQueue>
	}
 80021d0:	bf00      	nop
 80021d2:	3718      	adds	r7, #24
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af04      	add	r7, sp, #16
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 fb87 	bl	8003900 <pvPortMalloc>
 80021f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00e      	beq.n	8002218 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021fa:	2058      	movs	r0, #88	; 0x58
 80021fc:	f001 fb80 	bl	8003900 <pvPortMalloc>
 8002200:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
 800220e:	e005      	b.n	800221c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002210:	6978      	ldr	r0, [r7, #20]
 8002212:	f001 fc3d 	bl	8003a90 <vPortFree>
 8002216:	e001      	b.n	800221c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d013      	beq.n	800224a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002222:	88fa      	ldrh	r2, [r7, #6]
 8002224:	2300      	movs	r3, #0
 8002226:	9303      	str	r3, [sp, #12]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f80e 	bl	800225a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800223e:	69f8      	ldr	r0, [r7, #28]
 8002240:	f000 f89a 	bl	8002378 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002244:	2301      	movs	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	e002      	b.n	8002250 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800224e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002250:	69bb      	ldr	r3, [r7, #24]
	}
 8002252:	4618      	mov	r0, r3
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b088      	sub	sp, #32
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	461a      	mov	r2, r3
 8002272:	21a5      	movs	r1, #165	; 0xa5
 8002274:	f001 fd57 	bl	8003d26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002282:	3b01      	subs	r3, #1
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	f023 0307 	bic.w	r3, r3, #7
 8002290:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <prvInitialiseNewTask+0x56>
 800229c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a0:	f383 8811 	msr	BASEPRI, r3
 80022a4:	f3bf 8f6f 	isb	sy
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	e7fe      	b.n	80022ae <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d01f      	beq.n	80022f6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e012      	b.n	80022e2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	7819      	ldrb	r1, [r3, #0]
 80022c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	4413      	add	r3, r2
 80022ca:	3334      	adds	r3, #52	; 0x34
 80022cc:	460a      	mov	r2, r1
 80022ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d006      	beq.n	80022ea <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	3301      	adds	r3, #1
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	2b09      	cmp	r3, #9
 80022e6:	d9e9      	bls.n	80022bc <prvInitialiseNewTask+0x62>
 80022e8:	e000      	b.n	80022ec <prvInitialiseNewTask+0x92>
			{
				break;
 80022ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80022f4:	e003      	b.n	80022fe <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	2b04      	cmp	r3, #4
 8002302:	d901      	bls.n	8002308 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002304:	2304      	movs	r3, #4
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002312:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	2200      	movs	r2, #0
 8002318:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	3304      	adds	r3, #4
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fa2c 	bl	800177c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002326:	3318      	adds	r3, #24
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff fa27 	bl	800177c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002332:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	f1c3 0205 	rsb	r2, r3, #5
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	2200      	movs	r2, #0
 8002348:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	68f9      	ldr	r1, [r7, #12]
 8002356:	69b8      	ldr	r0, [r7, #24]
 8002358:	f001 f890 	bl	800347c <pxPortInitialiseStack>
 800235c:	4602      	mov	r2, r0
 800235e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800236c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002380:	f001 f9a4 	bl	80036cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002384:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <prvAddNewTaskToReadyList+0xc0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	4a2b      	ldr	r2, [pc, #172]	; (8002438 <prvAddNewTaskToReadyList+0xc0>)
 800238c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <prvAddNewTaskToReadyList+0xc4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002396:	4a29      	ldr	r2, [pc, #164]	; (800243c <prvAddNewTaskToReadyList+0xc4>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800239c:	4b26      	ldr	r3, [pc, #152]	; (8002438 <prvAddNewTaskToReadyList+0xc0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d110      	bne.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80023a4:	f000 fbb8 	bl	8002b18 <prvInitialiseTaskLists>
 80023a8:	e00d      	b.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80023aa:	4b25      	ldr	r3, [pc, #148]	; (8002440 <prvAddNewTaskToReadyList+0xc8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d109      	bne.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80023b2:	4b22      	ldr	r3, [pc, #136]	; (800243c <prvAddNewTaskToReadyList+0xc4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	429a      	cmp	r2, r3
 80023be:	d802      	bhi.n	80023c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <prvAddNewTaskToReadyList+0xc4>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80023c6:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <prvAddNewTaskToReadyList+0xcc>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <prvAddNewTaskToReadyList+0xcc>)
 80023ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80023d0:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <prvAddNewTaskToReadyList+0xcc>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	2201      	movs	r2, #1
 80023de:	409a      	lsls	r2, r3
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <prvAddNewTaskToReadyList+0xd0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	4a18      	ldr	r2, [pc, #96]	; (8002448 <prvAddNewTaskToReadyList+0xd0>)
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4a15      	ldr	r2, [pc, #84]	; (800244c <prvAddNewTaskToReadyList+0xd4>)
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3304      	adds	r3, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7ff f9c8 	bl	8001796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002406:	f001 f98f 	bl	8003728 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <prvAddNewTaskToReadyList+0xc8>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00e      	beq.n	8002430 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <prvAddNewTaskToReadyList+0xc4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	429a      	cmp	r2, r3
 800241e:	d207      	bcs.n	8002430 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <prvAddNewTaskToReadyList+0xd8>)
 8002422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000010c 	.word	0x2000010c
 800243c:	20000034 	.word	0x20000034
 8002440:	20000118 	.word	0x20000118
 8002444:	20000128 	.word	0x20000128
 8002448:	20000114 	.word	0x20000114
 800244c:	20000038 	.word	0x20000038
 8002450:	e000ed04 	.word	0xe000ed04

08002454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <vTaskStartScheduler+0x80>)
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	2300      	movs	r3, #0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	2282      	movs	r2, #130	; 0x82
 8002466:	491c      	ldr	r1, [pc, #112]	; (80024d8 <vTaskStartScheduler+0x84>)
 8002468:	481c      	ldr	r0, [pc, #112]	; (80024dc <vTaskStartScheduler+0x88>)
 800246a:	f7ff feb5 	bl	80021d8 <xTaskCreate>
 800246e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002476:	f000 fcf3 	bl	8002e60 <xTimerCreateTimerTask>
 800247a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d115      	bne.n	80024ae <vTaskStartScheduler+0x5a>
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002494:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <vTaskStartScheduler+0x8c>)
 8002496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800249a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <vTaskStartScheduler+0x90>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <vTaskStartScheduler+0x94>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80024a8:	f001 f872 	bl	8003590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80024ac:	e00d      	b.n	80024ca <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b4:	d109      	bne.n	80024ca <vTaskStartScheduler+0x76>
 80024b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	e7fe      	b.n	80024c8 <vTaskStartScheduler+0x74>
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000130 	.word	0x20000130
 80024d8:	08003d60 	.word	0x08003d60
 80024dc:	08002ae9 	.word	0x08002ae9
 80024e0:	2000012c 	.word	0x2000012c
 80024e4:	20000118 	.word	0x20000118
 80024e8:	20000110 	.word	0x20000110

080024ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <vTaskSuspendAll+0x18>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	4a03      	ldr	r2, [pc, #12]	; (8002504 <vTaskSuspendAll+0x18>)
 80024f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000134 	.word	0x20000134

08002508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002516:	4b41      	ldr	r3, [pc, #260]	; (800261c <xTaskResumeAll+0x114>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <xTaskResumeAll+0x2a>
 800251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002522:	f383 8811 	msr	BASEPRI, r3
 8002526:	f3bf 8f6f 	isb	sy
 800252a:	f3bf 8f4f 	dsb	sy
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	e7fe      	b.n	8002530 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002532:	f001 f8cb 	bl	80036cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002536:	4b39      	ldr	r3, [pc, #228]	; (800261c <xTaskResumeAll+0x114>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3b01      	subs	r3, #1
 800253c:	4a37      	ldr	r2, [pc, #220]	; (800261c <xTaskResumeAll+0x114>)
 800253e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002540:	4b36      	ldr	r3, [pc, #216]	; (800261c <xTaskResumeAll+0x114>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d161      	bne.n	800260c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <xTaskResumeAll+0x118>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05d      	beq.n	800260c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002550:	e02e      	b.n	80025b0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <xTaskResumeAll+0x11c>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	3318      	adds	r3, #24
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff f976 	bl	8001850 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3304      	adds	r3, #4
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff f971 	bl	8001850 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	2201      	movs	r2, #1
 8002574:	409a      	lsls	r2, r3
 8002576:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <xTaskResumeAll+0x120>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <xTaskResumeAll+0x120>)
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <xTaskResumeAll+0x124>)
 800258e:	441a      	add	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3304      	adds	r3, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4610      	mov	r0, r2
 8002598:	f7ff f8fd 	bl	8001796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a0:	4b23      	ldr	r3, [pc, #140]	; (8002630 <xTaskResumeAll+0x128>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80025aa:	4b22      	ldr	r3, [pc, #136]	; (8002634 <xTaskResumeAll+0x12c>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <xTaskResumeAll+0x11c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1cc      	bne.n	8002552 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80025be:	f000 fb27 	bl	8002c10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025c2:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <xTaskResumeAll+0x130>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d010      	beq.n	80025f0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80025ce:	f000 f847 	bl	8002660 <xTaskIncrementTick>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <xTaskResumeAll+0x12c>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f1      	bne.n	80025ce <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <xTaskResumeAll+0x130>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <xTaskResumeAll+0x12c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025f8:	2301      	movs	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <xTaskResumeAll+0x134>)
 80025fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800260c:	f001 f88c 	bl	8003728 <vPortExitCritical>

	return xAlreadyYielded;
 8002610:	68bb      	ldr	r3, [r7, #8]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000134 	.word	0x20000134
 8002620:	2000010c 	.word	0x2000010c
 8002624:	200000cc 	.word	0x200000cc
 8002628:	20000114 	.word	0x20000114
 800262c:	20000038 	.word	0x20000038
 8002630:	20000034 	.word	0x20000034
 8002634:	20000120 	.word	0x20000120
 8002638:	2000011c 	.word	0x2000011c
 800263c:	e000ed04 	.word	0xe000ed04

08002640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <xTaskGetTickCount+0x1c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800264c:	687b      	ldr	r3, [r7, #4]
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000110 	.word	0x20000110

08002660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800266a:	4b4e      	ldr	r3, [pc, #312]	; (80027a4 <xTaskIncrementTick+0x144>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 808d 	bne.w	800278e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002674:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <xTaskIncrementTick+0x148>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3301      	adds	r3, #1
 800267a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800267c:	4a4a      	ldr	r2, [pc, #296]	; (80027a8 <xTaskIncrementTick+0x148>)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11f      	bne.n	80026c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002688:	4b48      	ldr	r3, [pc, #288]	; (80027ac <xTaskIncrementTick+0x14c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <xTaskIncrementTick+0x46>
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	e7fe      	b.n	80026a4 <xTaskIncrementTick+0x44>
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <xTaskIncrementTick+0x14c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	4b40      	ldr	r3, [pc, #256]	; (80027b0 <xTaskIncrementTick+0x150>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3e      	ldr	r2, [pc, #248]	; (80027ac <xTaskIncrementTick+0x14c>)
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4a3e      	ldr	r2, [pc, #248]	; (80027b0 <xTaskIncrementTick+0x150>)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <xTaskIncrementTick+0x154>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	4a3c      	ldr	r2, [pc, #240]	; (80027b4 <xTaskIncrementTick+0x154>)
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	f000 faa4 	bl	8002c10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <xTaskIncrementTick+0x158>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d348      	bcc.n	8002764 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <xTaskIncrementTick+0x14c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d104      	bne.n	80026e6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <xTaskIncrementTick+0x158>)
 80026de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026e2:	601a      	str	r2, [r3, #0]
					break;
 80026e4:	e03e      	b.n	8002764 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026e6:	4b31      	ldr	r3, [pc, #196]	; (80027ac <xTaskIncrementTick+0x14c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d203      	bcs.n	8002706 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80026fe:	4a2e      	ldr	r2, [pc, #184]	; (80027b8 <xTaskIncrementTick+0x158>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002704:	e02e      	b.n	8002764 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3304      	adds	r3, #4
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff f8a0 	bl	8001850 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3318      	adds	r3, #24
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff f897 	bl	8001850 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	2201      	movs	r2, #1
 8002728:	409a      	lsls	r2, r3
 800272a:	4b24      	ldr	r3, [pc, #144]	; (80027bc <xTaskIncrementTick+0x15c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	4a22      	ldr	r2, [pc, #136]	; (80027bc <xTaskIncrementTick+0x15c>)
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <xTaskIncrementTick+0x160>)
 8002742:	441a      	add	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3304      	adds	r3, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f7ff f823 	bl	8001796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <xTaskIncrementTick+0x164>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	429a      	cmp	r2, r3
 800275c:	d3b9      	bcc.n	80026d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800275e:	2301      	movs	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002762:	e7b6      	b.n	80026d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <xTaskIncrementTick+0x164>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276a:	4915      	ldr	r1, [pc, #84]	; (80027c0 <xTaskIncrementTick+0x160>)
 800276c:	4613      	mov	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	440b      	add	r3, r1
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d901      	bls.n	8002780 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 800277c:	2301      	movs	r3, #1
 800277e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <xTaskIncrementTick+0x168>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002788:	2301      	movs	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	e004      	b.n	8002798 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <xTaskIncrementTick+0x16c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <xTaskIncrementTick+0x16c>)
 8002796:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002798:	697b      	ldr	r3, [r7, #20]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000134 	.word	0x20000134
 80027a8:	20000110 	.word	0x20000110
 80027ac:	200000c4 	.word	0x200000c4
 80027b0:	200000c8 	.word	0x200000c8
 80027b4:	20000124 	.word	0x20000124
 80027b8:	2000012c 	.word	0x2000012c
 80027bc:	20000114 	.word	0x20000114
 80027c0:	20000038 	.word	0x20000038
 80027c4:	20000034 	.word	0x20000034
 80027c8:	20000120 	.word	0x20000120
 80027cc:	2000011c 	.word	0x2000011c

080027d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80027d6:	4b26      	ldr	r3, [pc, #152]	; (8002870 <vTaskSwitchContext+0xa0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80027de:	4b25      	ldr	r3, [pc, #148]	; (8002874 <vTaskSwitchContext+0xa4>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80027e4:	e03e      	b.n	8002864 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80027e6:	4b23      	ldr	r3, [pc, #140]	; (8002874 <vTaskSwitchContext+0xa4>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <vTaskSwitchContext+0xa8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	f1c3 031f 	rsb	r3, r3, #31
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	491e      	ldr	r1, [pc, #120]	; (800287c <vTaskSwitchContext+0xac>)
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <vTaskSwitchContext+0x5a>
	__asm volatile
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	e7fe      	b.n	8002828 <vTaskSwitchContext+0x58>
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4a11      	ldr	r2, [pc, #68]	; (800287c <vTaskSwitchContext+0xac>)
 8002836:	4413      	add	r3, r2
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	3308      	adds	r3, #8
 800284c:	429a      	cmp	r2, r3
 800284e:	d104      	bne.n	800285a <vTaskSwitchContext+0x8a>
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <vTaskSwitchContext+0xb0>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20000134 	.word	0x20000134
 8002874:	20000120 	.word	0x20000120
 8002878:	20000114 	.word	0x20000114
 800287c:	20000038 	.word	0x20000038
 8002880:	20000034 	.word	0x20000034

08002884 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d109      	bne.n	80028a8 <vTaskPlaceOnEventList+0x24>
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e7fe      	b.n	80028a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <vTaskPlaceOnEventList+0x44>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3318      	adds	r3, #24
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7fe ff94 	bl	80017de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80028b6:	2101      	movs	r1, #1
 80028b8:	6838      	ldr	r0, [r7, #0]
 80028ba:	f000 fa6b 	bl	8002d94 <prvAddCurrentTaskToDelayedList>
}
 80028be:	bf00      	nop
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000034 	.word	0x20000034

080028cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <vTaskPlaceOnEventListRestricted+0x26>
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e7fe      	b.n	80028f0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <vTaskPlaceOnEventListRestricted+0x50>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3318      	adds	r3, #24
 80028f8:	4619      	mov	r1, r3
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7fe ff4b 	bl	8001796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800290a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	68b8      	ldr	r0, [r7, #8]
 8002910:	f000 fa40 	bl	8002d94 <prvAddCurrentTaskToDelayedList>
	}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000034 	.word	0x20000034

08002920 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <xTaskRemoveFromEventList+0x2a>
 8002936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293a:	f383 8811 	msr	BASEPRI, r3
 800293e:	f3bf 8f6f 	isb	sy
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e7fe      	b.n	8002948 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	3318      	adds	r3, #24
 800294e:	4618      	mov	r0, r3
 8002950:	f7fe ff7e 	bl	8001850 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <xTaskRemoveFromEventList+0xac>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11c      	bne.n	8002996 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	3304      	adds	r3, #4
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe ff75 	bl	8001850 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	2201      	movs	r2, #1
 800296c:	409a      	lsls	r2, r3
 800296e:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <xTaskRemoveFromEventList+0xb0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <xTaskRemoveFromEventList+0xb0>)
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <xTaskRemoveFromEventList+0xb4>)
 8002986:	441a      	add	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	3304      	adds	r3, #4
 800298c:	4619      	mov	r1, r3
 800298e:	4610      	mov	r0, r2
 8002990:	f7fe ff01 	bl	8001796 <vListInsertEnd>
 8002994:	e005      	b.n	80029a2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	3318      	adds	r3, #24
 800299a:	4619      	mov	r1, r3
 800299c:	480e      	ldr	r0, [pc, #56]	; (80029d8 <xTaskRemoveFromEventList+0xb8>)
 800299e:	f7fe fefa 	bl	8001796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <xTaskRemoveFromEventList+0xbc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d905      	bls.n	80029bc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80029b4:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <xTaskRemoveFromEventList+0xc0>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e001      	b.n	80029c0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80029c0:	697b      	ldr	r3, [r7, #20]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000134 	.word	0x20000134
 80029d0:	20000114 	.word	0x20000114
 80029d4:	20000038 	.word	0x20000038
 80029d8:	200000cc 	.word	0x200000cc
 80029dc:	20000034 	.word	0x20000034
 80029e0:	20000120 	.word	0x20000120

080029e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <vTaskInternalSetTimeOutState+0x24>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <vTaskInternalSetTimeOutState+0x28>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	605a      	str	r2, [r3, #4]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	20000124 	.word	0x20000124
 8002a0c:	20000110 	.word	0x20000110

08002a10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d109      	bne.n	8002a34 <xTaskCheckForTimeOut+0x24>
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	e7fe      	b.n	8002a32 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <xTaskCheckForTimeOut+0x3e>
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	e7fe      	b.n	8002a4c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002a4e:	f000 fe3d 	bl	80036cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <xTaskCheckForTimeOut+0xb8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a6a:	d102      	bne.n	8002a72 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	e023      	b.n	8002aba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <xTaskCheckForTimeOut+0xbc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d007      	beq.n	8002a8e <xTaskCheckForTimeOut+0x7e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	e015      	b.n	8002aba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d20b      	bcs.n	8002ab0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff9d 	bl	80029e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	e004      	b.n	8002aba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002aba:	f000 fe35 	bl	8003728 <vPortExitCritical>

	return xReturn;
 8002abe:	69fb      	ldr	r3, [r7, #28]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3720      	adds	r7, #32
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000110 	.word	0x20000110
 8002acc:	20000124 	.word	0x20000124

08002ad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002ad4:	4b03      	ldr	r3, [pc, #12]	; (8002ae4 <vTaskMissedYield+0x14>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	20000120 	.word	0x20000120

08002ae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002af0:	f000 f852 	bl	8002b98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <prvIdleTask+0x28>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d9f9      	bls.n	8002af0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <prvIdleTask+0x2c>)
 8002afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b0c:	e7f0      	b.n	8002af0 <prvIdleTask+0x8>
 8002b0e:	bf00      	nop
 8002b10:	20000038 	.word	0x20000038
 8002b14:	e000ed04 	.word	0xe000ed04

08002b18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	e00c      	b.n	8002b3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <prvInitialiseTaskLists+0x60>)
 8002b30:	4413      	add	r3, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe fe02 	bl	800173c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	607b      	str	r3, [r7, #4]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d9ef      	bls.n	8002b24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b44:	480d      	ldr	r0, [pc, #52]	; (8002b7c <prvInitialiseTaskLists+0x64>)
 8002b46:	f7fe fdf9 	bl	800173c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b4a:	480d      	ldr	r0, [pc, #52]	; (8002b80 <prvInitialiseTaskLists+0x68>)
 8002b4c:	f7fe fdf6 	bl	800173c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <prvInitialiseTaskLists+0x6c>)
 8002b52:	f7fe fdf3 	bl	800173c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b56:	480c      	ldr	r0, [pc, #48]	; (8002b88 <prvInitialiseTaskLists+0x70>)
 8002b58:	f7fe fdf0 	bl	800173c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b5c:	480b      	ldr	r0, [pc, #44]	; (8002b8c <prvInitialiseTaskLists+0x74>)
 8002b5e:	f7fe fded 	bl	800173c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	; (8002b90 <prvInitialiseTaskLists+0x78>)
 8002b64:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <prvInitialiseTaskLists+0x64>)
 8002b66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b68:	4b0a      	ldr	r3, [pc, #40]	; (8002b94 <prvInitialiseTaskLists+0x7c>)
 8002b6a:	4a05      	ldr	r2, [pc, #20]	; (8002b80 <prvInitialiseTaskLists+0x68>)
 8002b6c:	601a      	str	r2, [r3, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000038 	.word	0x20000038
 8002b7c:	2000009c 	.word	0x2000009c
 8002b80:	200000b0 	.word	0x200000b0
 8002b84:	200000cc 	.word	0x200000cc
 8002b88:	200000e0 	.word	0x200000e0
 8002b8c:	200000f8 	.word	0x200000f8
 8002b90:	200000c4 	.word	0x200000c4
 8002b94:	200000c8 	.word	0x200000c8

08002b98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b9e:	e019      	b.n	8002bd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002ba0:	f000 fd94 	bl	80036cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <prvCheckTasksWaitingTermination+0x4c>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3304      	adds	r3, #4
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fe4d 	bl	8001850 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <prvCheckTasksWaitingTermination+0x50>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <prvCheckTasksWaitingTermination+0x50>)
 8002bbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <prvCheckTasksWaitingTermination+0x54>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <prvCheckTasksWaitingTermination+0x54>)
 8002bc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002bca:	f000 fdad 	bl	8003728 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f80e 	bl	8002bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <prvCheckTasksWaitingTermination+0x54>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e1      	bne.n	8002ba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200000e0 	.word	0x200000e0
 8002be8:	2000010c 	.word	0x2000010c
 8002bec:	200000f4 	.word	0x200000f4

08002bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 ff47 	bl	8003a90 <vPortFree>
			vPortFree( pxTCB );
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 ff44 	bl	8003a90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <prvResetNextTaskUnblockTime+0x38>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d104      	bne.n	8002c2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c20:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <prvResetNextTaskUnblockTime+0x3c>)
 8002c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c28:	e008      	b.n	8002c3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c2a:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <prvResetNextTaskUnblockTime+0x38>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a04      	ldr	r2, [pc, #16]	; (8002c4c <prvResetNextTaskUnblockTime+0x3c>)
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	200000c4 	.word	0x200000c4
 8002c4c:	2000012c 	.word	0x2000012c

08002c50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <xTaskGetSchedulerState+0x34>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	e008      	b.n	8002c76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c64:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <xTaskGetSchedulerState+0x38>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d102      	bne.n	8002c72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	e001      	b.n	8002c76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c72:	2300      	movs	r3, #0
 8002c74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c76:	687b      	ldr	r3, [r7, #4]
	}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	20000118 	.word	0x20000118
 8002c88:	20000134 	.word	0x20000134

08002c8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d06c      	beq.n	8002d7c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002ca2:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <xTaskPriorityDisinherit+0xfc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d009      	beq.n	8002cc0 <xTaskPriorityDisinherit+0x34>
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e7fe      	b.n	8002cbe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d109      	bne.n	8002cdc <xTaskPriorityDisinherit+0x50>
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	e7fe      	b.n	8002cda <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce0:	1e5a      	subs	r2, r3, #1
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d044      	beq.n	8002d7c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d140      	bne.n	8002d7c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fe fda6 	bl	8001850 <uxListRemove>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d115      	bne.n	8002d36 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0e:	491f      	ldr	r1, [pc, #124]	; (8002d8c <xTaskPriorityDisinherit+0x100>)
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10a      	bne.n	8002d36 <xTaskPriorityDisinherit+0xaa>
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	2201      	movs	r2, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <xTaskPriorityDisinherit+0x104>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4013      	ands	r3, r2
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <xTaskPriorityDisinherit+0x104>)
 8002d34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f1c3 0205 	rsb	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	2201      	movs	r2, #1
 8002d50:	409a      	lsls	r2, r3
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <xTaskPriorityDisinherit+0x104>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	4a0d      	ldr	r2, [pc, #52]	; (8002d90 <xTaskPriorityDisinherit+0x104>)
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <xTaskPriorityDisinherit+0x100>)
 8002d6a:	441a      	add	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f7fe fd0f 	bl	8001796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002d7c:	697b      	ldr	r3, [r7, #20]
	}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000034 	.word	0x20000034
 8002d8c:	20000038 	.word	0x20000038
 8002d90:	20000114 	.word	0x20000114

08002d94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d9e:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002da4:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fd50 	bl	8001850 <uxListRemove>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	4a20      	ldr	r2, [pc, #128]	; (8002e4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002dcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd4:	d10a      	bne.n	8002dec <prvAddCurrentTaskToDelayedList+0x58>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d007      	beq.n	8002dec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	; (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3304      	adds	r3, #4
 8002de2:	4619      	mov	r1, r3
 8002de4:	481a      	ldr	r0, [pc, #104]	; (8002e50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002de6:	f7fe fcd6 	bl	8001796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002dea:	e026      	b.n	8002e3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4413      	add	r3, r2
 8002df2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002df4:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d209      	bcs.n	8002e18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f7fe fce4 	bl	80017de <vListInsert>
}
 8002e16:	e010      	b.n	8002e3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3304      	adds	r3, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4610      	mov	r0, r2
 8002e26:	f7fe fcda 	bl	80017de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d202      	bcs.n	8002e3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002e34:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	6013      	str	r3, [r2, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000110 	.word	0x20000110
 8002e48:	20000034 	.word	0x20000034
 8002e4c:	20000114 	.word	0x20000114
 8002e50:	200000f8 	.word	0x200000f8
 8002e54:	200000c8 	.word	0x200000c8
 8002e58:	200000c4 	.word	0x200000c4
 8002e5c:	2000012c 	.word	0x2000012c

08002e60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002e6a:	f000 fad1 	bl	8003410 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <xTimerCreateTimerTask+0x54>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <xTimerCreateTimerTask+0x58>)
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e84:	490d      	ldr	r1, [pc, #52]	; (8002ebc <xTimerCreateTimerTask+0x5c>)
 8002e86:	480e      	ldr	r0, [pc, #56]	; (8002ec0 <xTimerCreateTimerTask+0x60>)
 8002e88:	f7ff f9a6 	bl	80021d8 <xTaskCreate>
 8002e8c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <xTimerCreateTimerTask+0x48>
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	e7fe      	b.n	8002ea6 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002ea8:	687b      	ldr	r3, [r7, #4]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000168 	.word	0x20000168
 8002eb8:	2000016c 	.word	0x2000016c
 8002ebc:	08003d68 	.word	0x08003d68
 8002ec0:	08002ff5 	.word	0x08002ff5

08002ec4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <xTimerGenericCommand+0x2c>
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	623b      	str	r3, [r7, #32]
 8002eee:	e7fe      	b.n	8002eee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002ef0:	4b19      	ldr	r3, [pc, #100]	; (8002f58 <xTimerGenericCommand+0x94>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d02a      	beq.n	8002f4e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b05      	cmp	r3, #5
 8002f08:	dc18      	bgt.n	8002f3c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002f0a:	f7ff fea1 	bl	8002c50 <xTaskGetSchedulerState>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d109      	bne.n	8002f28 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002f14:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <xTimerGenericCommand+0x94>)
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	f107 0114 	add.w	r1, r7, #20
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	f7fe fd80 	bl	8001a24 <xQueueGenericSend>
 8002f24:	6278      	str	r0, [r7, #36]	; 0x24
 8002f26:	e012      	b.n	8002f4e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <xTimerGenericCommand+0x94>)
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	f107 0114 	add.w	r1, r7, #20
 8002f30:	2300      	movs	r3, #0
 8002f32:	2200      	movs	r2, #0
 8002f34:	f7fe fd76 	bl	8001a24 <xQueueGenericSend>
 8002f38:	6278      	str	r0, [r7, #36]	; 0x24
 8002f3a:	e008      	b.n	8002f4e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <xTimerGenericCommand+0x94>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	f107 0114 	add.w	r1, r7, #20
 8002f44:	2300      	movs	r3, #0
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	f7fe fe66 	bl	8001c18 <xQueueGenericSendFromISR>
 8002f4c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3728      	adds	r7, #40	; 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000168 	.word	0x20000168

08002f5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <prvProcessExpiredTimer+0x94>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	3304      	adds	r3, #4
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fc6b 	bl	8001850 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d021      	beq.n	8002fcc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	699a      	ldr	r2, [r3, #24]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	18d1      	adds	r1, r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	6978      	ldr	r0, [r7, #20]
 8002f96:	f000 f8d1 	bl	800313c <prvInsertTimerInActiveList>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01e      	beq.n	8002fde <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	2100      	movs	r1, #0
 8002faa:	6978      	ldr	r0, [r7, #20]
 8002fac:	f7ff ff8a 	bl	8002ec4 <xTimerGenericCommand>
 8002fb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d112      	bne.n	8002fde <prvProcessExpiredTimer+0x82>
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e7fe      	b.n	8002fca <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	6978      	ldr	r0, [r7, #20]
 8002fe4:	4798      	blx	r3
}
 8002fe6:	bf00      	nop
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000160 	.word	0x20000160

08002ff4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002ffc:	f107 0308 	add.w	r3, r7, #8
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f857 	bl	80030b4 <prvGetNextExpireTime>
 8003006:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4619      	mov	r1, r3
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f803 	bl	8003018 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003012:	f000 f8d5 	bl	80031c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003016:	e7f1      	b.n	8002ffc <prvTimerTask+0x8>

08003018 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003022:	f7ff fa63 	bl	80024ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003026:	f107 0308 	add.w	r3, r7, #8
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f866 	bl	80030fc <prvSampleTimeNow>
 8003030:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d130      	bne.n	800309a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <prvProcessTimerOrBlockTask+0x3c>
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	429a      	cmp	r2, r3
 8003044:	d806      	bhi.n	8003054 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003046:	f7ff fa5f 	bl	8002508 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff85 	bl	8002f5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003052:	e024      	b.n	800309e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800305a:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <prvProcessTimerOrBlockTask+0x90>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <prvProcessTimerOrBlockTask+0x50>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <prvProcessTimerOrBlockTask+0x52>
 8003068:	2300      	movs	r3, #0
 800306a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <prvProcessTimerOrBlockTask+0x94>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	f7ff f879 	bl	8002170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800307e:	f7ff fa43 	bl	8002508 <xTaskResumeAll>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10a      	bne.n	800309e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <prvProcessTimerOrBlockTask+0x98>)
 800308a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	f3bf 8f6f 	isb	sy
}
 8003098:	e001      	b.n	800309e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800309a:	f7ff fa35 	bl	8002508 <xTaskResumeAll>
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000164 	.word	0x20000164
 80030ac:	20000168 	.word	0x20000168
 80030b0:	e000ed04 	.word	0xe000ed04

080030b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80030bc:	4b0e      	ldr	r3, [pc, #56]	; (80030f8 <prvGetNextExpireTime+0x44>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <prvGetNextExpireTime+0x16>
 80030c6:	2201      	movs	r2, #1
 80030c8:	e000      	b.n	80030cc <prvGetNextExpireTime+0x18>
 80030ca:	2200      	movs	r2, #0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <prvGetNextExpireTime+0x44>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e001      	b.n	80030e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80030e8:	68fb      	ldr	r3, [r7, #12]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000160 	.word	0x20000160

080030fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003104:	f7ff fa9c 	bl	8002640 <xTaskGetTickCount>
 8003108:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <prvSampleTimeNow+0x3c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	429a      	cmp	r2, r3
 8003112:	d205      	bcs.n	8003120 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003114:	f000 f918 	bl	8003348 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e002      	b.n	8003126 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003126:	4a04      	ldr	r2, [pc, #16]	; (8003138 <prvSampleTimeNow+0x3c>)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800312c:	68fb      	ldr	r3, [r7, #12]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000170 	.word	0x20000170

0800313c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	d812      	bhi.n	8003188 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	1ad2      	subs	r2, r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	429a      	cmp	r2, r3
 800316e:	d302      	bcc.n	8003176 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003170:	2301      	movs	r3, #1
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e01b      	b.n	80031ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <prvInsertTimerInActiveList+0x7c>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3304      	adds	r3, #4
 800317e:	4619      	mov	r1, r3
 8003180:	4610      	mov	r0, r2
 8003182:	f7fe fb2c 	bl	80017de <vListInsert>
 8003186:	e012      	b.n	80031ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d206      	bcs.n	800319e <prvInsertTimerInActiveList+0x62>
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003198:	2301      	movs	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e007      	b.n	80031ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <prvInsertTimerInActiveList+0x80>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f7fe fb18 	bl	80017de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80031ae:	697b      	ldr	r3, [r7, #20]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000164 	.word	0x20000164
 80031bc:	20000160 	.word	0x20000160

080031c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08c      	sub	sp, #48	; 0x30
 80031c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80031c6:	e0ac      	b.n	8003322 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f2c0 80a8 	blt.w	8003320 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	3304      	adds	r3, #4
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fe fb35 	bl	8001850 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031e6:	1d3b      	adds	r3, r7, #4
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff87 	bl	80030fc <prvSampleTimeNow>
 80031ee:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b09      	cmp	r3, #9
 80031f4:	f200 8095 	bhi.w	8003322 <prvProcessReceivedCommands+0x162>
 80031f8:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <prvProcessReceivedCommands+0x40>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003229 	.word	0x08003229
 8003204:	08003229 	.word	0x08003229
 8003208:	08003229 	.word	0x08003229
 800320c:	0800329b 	.word	0x0800329b
 8003210:	080032af 	.word	0x080032af
 8003214:	080032f7 	.word	0x080032f7
 8003218:	08003229 	.word	0x08003229
 800321c:	08003229 	.word	0x08003229
 8003220:	0800329b 	.word	0x0800329b
 8003224:	080032af 	.word	0x080032af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	18d1      	adds	r1, r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a3a      	ldr	r2, [r7, #32]
 8003246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003248:	f7ff ff78 	bl	800313c <prvInsertTimerInActiveList>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d067      	beq.n	8003322 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003258:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d05c      	beq.n	8003322 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	441a      	add	r2, r3
 8003270:	2300      	movs	r3, #0
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	2300      	movs	r3, #0
 8003276:	2100      	movs	r1, #0
 8003278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800327a:	f7ff fe23 	bl	8002ec4 <xTimerGenericCommand>
 800327e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d14d      	bne.n	8003322 <prvProcessReceivedCommands+0x162>
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	e7fe      	b.n	8003298 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80032ac:	e039      	b.n	8003322 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80032c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <prvProcessReceivedCommands+0x122>
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e7fe      	b.n	80032e0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	18d1      	adds	r1, r2, r3
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032f0:	f7ff ff24 	bl	800313c <prvInsertTimerInActiveList>
					break;
 80032f4:	e015      	b.n	8003322 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d103      	bne.n	800330c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8003304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003306:	f000 fbc3 	bl	8003a90 <vPortFree>
 800330a:	e00a      	b.n	8003322 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	b2da      	uxtb	r2, r3
 8003318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800331e:	e000      	b.n	8003322 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003320:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <prvProcessReceivedCommands+0x184>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f107 0108 	add.w	r1, r7, #8
 800332a:	2200      	movs	r2, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fd0b 	bl	8001d48 <xQueueReceive>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f47f af47 	bne.w	80031c8 <prvProcessReceivedCommands+0x8>
	}
}
 800333a:	bf00      	nop
 800333c:	3728      	adds	r7, #40	; 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000168 	.word	0x20000168

08003348 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800334e:	e047      	b.n	80033e0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <prvSwitchTimerLists+0xc0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <prvSwitchTimerLists+0xc0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3304      	adds	r3, #4
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe fa71 	bl	8001850 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02d      	beq.n	80033e0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4413      	add	r3, r2
 800338c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	429a      	cmp	r2, r3
 8003394:	d90e      	bls.n	80033b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <prvSwitchTimerLists+0xc0>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f7fe fa16 	bl	80017de <vListInsert>
 80033b2:	e015      	b.n	80033e0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80033b4:	2300      	movs	r3, #0
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2300      	movs	r3, #0
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	2100      	movs	r1, #0
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f7ff fd80 	bl	8002ec4 <xTimerGenericCommand>
 80033c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <prvSwitchTimerLists+0x98>
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	e7fe      	b.n	80033de <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <prvSwitchTimerLists+0xc0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1b2      	bne.n	8003350 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <prvSwitchTimerLists+0xc0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <prvSwitchTimerLists+0xc4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <prvSwitchTimerLists+0xc0>)
 80033f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <prvSwitchTimerLists+0xc4>)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	6013      	str	r3, [r2, #0]
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000160 	.word	0x20000160
 800340c:	20000164 	.word	0x20000164

08003410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003414:	f000 f95a 	bl	80036cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003418:	4b12      	ldr	r3, [pc, #72]	; (8003464 <prvCheckForValidListAndQueue+0x54>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11d      	bne.n	800345c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003420:	4811      	ldr	r0, [pc, #68]	; (8003468 <prvCheckForValidListAndQueue+0x58>)
 8003422:	f7fe f98b 	bl	800173c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003426:	4811      	ldr	r0, [pc, #68]	; (800346c <prvCheckForValidListAndQueue+0x5c>)
 8003428:	f7fe f988 	bl	800173c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800342c:	4b10      	ldr	r3, [pc, #64]	; (8003470 <prvCheckForValidListAndQueue+0x60>)
 800342e:	4a0e      	ldr	r2, [pc, #56]	; (8003468 <prvCheckForValidListAndQueue+0x58>)
 8003430:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <prvCheckForValidListAndQueue+0x64>)
 8003434:	4a0d      	ldr	r2, [pc, #52]	; (800346c <prvCheckForValidListAndQueue+0x5c>)
 8003436:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003438:	2200      	movs	r2, #0
 800343a:	210c      	movs	r1, #12
 800343c:	200a      	movs	r0, #10
 800343e:	f7fe fa99 	bl	8001974 <xQueueGenericCreate>
 8003442:	4602      	mov	r2, r0
 8003444:	4b07      	ldr	r3, [pc, #28]	; (8003464 <prvCheckForValidListAndQueue+0x54>)
 8003446:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <prvCheckForValidListAndQueue+0x54>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <prvCheckForValidListAndQueue+0x54>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4908      	ldr	r1, [pc, #32]	; (8003478 <prvCheckForValidListAndQueue+0x68>)
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fe62 	bl	8002120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800345c:	f000 f964 	bl	8003728 <vPortExitCritical>
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20000168 	.word	0x20000168
 8003468:	20000138 	.word	0x20000138
 800346c:	2000014c 	.word	0x2000014c
 8003470:	20000160 	.word	0x20000160
 8003474:	20000164 	.word	0x20000164
 8003478:	08003d70 	.word	0x08003d70

0800347c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3b04      	subs	r3, #4
 800348c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3b04      	subs	r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f023 0201 	bic.w	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	3b04      	subs	r3, #4
 80034aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80034ac:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <pxPortInitialiseStack+0x64>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3b14      	subs	r3, #20
 80034b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3b04      	subs	r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f06f 0202 	mvn.w	r2, #2
 80034ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	3b20      	subs	r3, #32
 80034d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	080034e5 	.word	0x080034e5

080034e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <prvTaskExitError+0x50>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f6:	d009      	beq.n	800350c <prvTaskExitError+0x28>
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e7fe      	b.n	800350a <prvTaskExitError+0x26>
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800351e:	bf00      	nop
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0fc      	beq.n	8003520 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	2000000c 	.word	0x2000000c
	...

08003540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <pxCurrentTCBConst2>)
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	6808      	ldr	r0, [r1, #0]
 8003546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800354a:	f380 8809 	msr	PSP, r0
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f380 8811 	msr	BASEPRI, r0
 800355a:	4770      	bx	lr
 800355c:	f3af 8000 	nop.w

08003560 <pxCurrentTCBConst2>:
 8003560:	20000034 	.word	0x20000034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop

08003568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003568:	4808      	ldr	r0, [pc, #32]	; (800358c <prvPortStartFirstTask+0x24>)
 800356a:	6800      	ldr	r0, [r0, #0]
 800356c:	6800      	ldr	r0, [r0, #0]
 800356e:	f380 8808 	msr	MSP, r0
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f380 8814 	msr	CONTROL, r0
 800357a:	b662      	cpsie	i
 800357c:	b661      	cpsie	f
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	df00      	svc	0
 8003588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800358a:	bf00      	nop
 800358c:	e000ed08 	.word	0xe000ed08

08003590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003596:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <xPortStartScheduler+0x118>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a44      	ldr	r2, [pc, #272]	; (80036ac <xPortStartScheduler+0x11c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d109      	bne.n	80035b4 <xPortStartScheduler+0x24>
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	e7fe      	b.n	80035b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035b4:	4b3c      	ldr	r3, [pc, #240]	; (80036a8 <xPortStartScheduler+0x118>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3d      	ldr	r2, [pc, #244]	; (80036b0 <xPortStartScheduler+0x120>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d109      	bne.n	80035d2 <xPortStartScheduler+0x42>
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e7fe      	b.n	80035d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035d2:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <xPortStartScheduler+0x124>)
 80035d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	22ff      	movs	r2, #255	; 0xff
 80035e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <xPortStartScheduler+0x128>)
 80035f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035fa:	4b30      	ldr	r3, [pc, #192]	; (80036bc <xPortStartScheduler+0x12c>)
 80035fc:	2207      	movs	r2, #7
 80035fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003600:	e009      	b.n	8003616 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003602:	4b2e      	ldr	r3, [pc, #184]	; (80036bc <xPortStartScheduler+0x12c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3b01      	subs	r3, #1
 8003608:	4a2c      	ldr	r2, [pc, #176]	; (80036bc <xPortStartScheduler+0x12c>)
 800360a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b80      	cmp	r3, #128	; 0x80
 8003620:	d0ef      	beq.n	8003602 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <xPortStartScheduler+0x12c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f1c3 0307 	rsb	r3, r3, #7
 800362a:	2b04      	cmp	r3, #4
 800362c:	d009      	beq.n	8003642 <xPortStartScheduler+0xb2>
 800362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003632:	f383 8811 	msr	BASEPRI, r3
 8003636:	f3bf 8f6f 	isb	sy
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	e7fe      	b.n	8003640 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003642:	4b1e      	ldr	r3, [pc, #120]	; (80036bc <xPortStartScheduler+0x12c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <xPortStartScheduler+0x12c>)
 800364a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800364c:	4b1b      	ldr	r3, [pc, #108]	; (80036bc <xPortStartScheduler+0x12c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003654:	4a19      	ldr	r2, [pc, #100]	; (80036bc <xPortStartScheduler+0x12c>)
 8003656:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <xPortStartScheduler+0x130>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <xPortStartScheduler+0x130>)
 8003666:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800366a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <xPortStartScheduler+0x130>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <xPortStartScheduler+0x130>)
 8003672:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003676:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003678:	f000 f8d6 	bl	8003828 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800367c:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <xPortStartScheduler+0x134>)
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003682:	f000 f8f5 	bl	8003870 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <xPortStartScheduler+0x138>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <xPortStartScheduler+0x138>)
 800368c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003690:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003692:	f7ff ff69 	bl	8003568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003696:	f7ff f89b 	bl	80027d0 <vTaskSwitchContext>
	prvTaskExitError();
 800369a:	f7ff ff23 	bl	80034e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	e000ed00 	.word	0xe000ed00
 80036ac:	410fc271 	.word	0x410fc271
 80036b0:	410fc270 	.word	0x410fc270
 80036b4:	e000e400 	.word	0xe000e400
 80036b8:	20000174 	.word	0x20000174
 80036bc:	20000178 	.word	0x20000178
 80036c0:	e000ed20 	.word	0xe000ed20
 80036c4:	2000000c 	.word	0x2000000c
 80036c8:	e000ef34 	.word	0xe000ef34

080036cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <vPortEnterCritical+0x54>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3301      	adds	r3, #1
 80036ea:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <vPortEnterCritical+0x54>)
 80036ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <vPortEnterCritical+0x54>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d10e      	bne.n	8003714 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036f6:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <vPortEnterCritical+0x58>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <vPortEnterCritical+0x48>
 8003700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003704:	f383 8811 	msr	BASEPRI, r3
 8003708:	f3bf 8f6f 	isb	sy
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	e7fe      	b.n	8003712 <vPortEnterCritical+0x46>
	}
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	2000000c 	.word	0x2000000c
 8003724:	e000ed04 	.word	0xe000ed04

08003728 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <vPortExitCritical+0x4c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <vPortExitCritical+0x22>
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	e7fe      	b.n	8003748 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <vPortExitCritical+0x4c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3b01      	subs	r3, #1
 8003750:	4a08      	ldr	r2, [pc, #32]	; (8003774 <vPortExitCritical+0x4c>)
 8003752:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <vPortExitCritical+0x4c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d104      	bne.n	8003766 <vPortExitCritical+0x3e>
 800375c:	2300      	movs	r3, #0
 800375e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	2000000c 	.word	0x2000000c
	...

08003780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003780:	f3ef 8009 	mrs	r0, PSP
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <pxCurrentTCBConst>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	f01e 0f10 	tst.w	lr, #16
 8003790:	bf08      	it	eq
 8003792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800379a:	6010      	str	r0, [r2, #0]
 800379c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037a4:	f380 8811 	msr	BASEPRI, r0
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f7ff f80e 	bl	80027d0 <vTaskSwitchContext>
 80037b4:	f04f 0000 	mov.w	r0, #0
 80037b8:	f380 8811 	msr	BASEPRI, r0
 80037bc:	bc09      	pop	{r0, r3}
 80037be:	6819      	ldr	r1, [r3, #0]
 80037c0:	6808      	ldr	r0, [r1, #0]
 80037c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c6:	f01e 0f10 	tst.w	lr, #16
 80037ca:	bf08      	it	eq
 80037cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037d0:	f380 8809 	msr	PSP, r0
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	f3af 8000 	nop.w

080037e0 <pxCurrentTCBConst>:
 80037e0:	20000034 	.word	0x20000034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop

080037e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003800:	f7fe ff2e 	bl	8002660 <xTaskIncrementTick>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <SysTick_Handler+0x3c>)
 800380c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	e000ed04 	.word	0xe000ed04

08003828 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <vPortSetupTimerInterrupt+0x34>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <vPortSetupTimerInterrupt+0x38>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <vPortSetupTimerInterrupt+0x3c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <vPortSetupTimerInterrupt+0x40>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	099b      	lsrs	r3, r3, #6
 8003844:	4a09      	ldr	r2, [pc, #36]	; (800386c <vPortSetupTimerInterrupt+0x44>)
 8003846:	3b01      	subs	r3, #1
 8003848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <vPortSetupTimerInterrupt+0x34>)
 800384c:	2207      	movs	r2, #7
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000e010 	.word	0xe000e010
 8003860:	e000e018 	.word	0xe000e018
 8003864:	20000000 	.word	0x20000000
 8003868:	10624dd3 	.word	0x10624dd3
 800386c:	e000e014 	.word	0xe000e014

08003870 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003870:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003880 <vPortEnableVFP+0x10>
 8003874:	6801      	ldr	r1, [r0, #0]
 8003876:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800387a:	6001      	str	r1, [r0, #0]
 800387c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800387e:	bf00      	nop
 8003880:	e000ed88 	.word	0xe000ed88

08003884 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800388a:	f3ef 8305 	mrs	r3, IPSR
 800388e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b0f      	cmp	r3, #15
 8003894:	d913      	bls.n	80038be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003896:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <vPortValidateInterruptPriority+0x6c>)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80038a0:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <vPortValidateInterruptPriority+0x70>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	7afa      	ldrb	r2, [r7, #11]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d209      	bcs.n	80038be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	607b      	str	r3, [r7, #4]
 80038bc:	e7fe      	b.n	80038bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80038be:	4b0e      	ldr	r3, [pc, #56]	; (80038f8 <vPortValidateInterruptPriority+0x74>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80038c6:	4b0d      	ldr	r3, [pc, #52]	; (80038fc <vPortValidateInterruptPriority+0x78>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d909      	bls.n	80038e2 <vPortValidateInterruptPriority+0x5e>
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	e7fe      	b.n	80038e0 <vPortValidateInterruptPriority+0x5c>
	}
 80038e2:	bf00      	nop
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e000e3f0 	.word	0xe000e3f0
 80038f4:	20000174 	.word	0x20000174
 80038f8:	e000ed0c 	.word	0xe000ed0c
 80038fc:	20000178 	.word	0x20000178

08003900 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800390c:	f7fe fdee 	bl	80024ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003910:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <pvPortMalloc+0x178>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003918:	f000 f91a 	bl	8003b50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800391c:	4b57      	ldr	r3, [pc, #348]	; (8003a7c <pvPortMalloc+0x17c>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	f040 8091 	bne.w	8003a4c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01c      	beq.n	800396a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003930:	2208      	movs	r2, #8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	2b00      	cmp	r3, #0
 8003940:	d013      	beq.n	800396a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f023 0307 	bic.w	r3, r3, #7
 8003948:	3308      	adds	r3, #8
 800394a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <pvPortMalloc+0x6a>
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e7fe      	b.n	8003968 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d06d      	beq.n	8003a4c <pvPortMalloc+0x14c>
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <pvPortMalloc+0x180>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d868      	bhi.n	8003a4c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800397a:	4b42      	ldr	r3, [pc, #264]	; (8003a84 <pvPortMalloc+0x184>)
 800397c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800397e:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <pvPortMalloc+0x184>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003984:	e004      	b.n	8003990 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d903      	bls.n	80039a2 <pvPortMalloc+0xa2>
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f1      	bne.n	8003986 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039a2:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <pvPortMalloc+0x178>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d04f      	beq.n	8003a4c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2208      	movs	r2, #8
 80039b2:	4413      	add	r3, r2
 80039b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	1ad2      	subs	r2, r2, r3
 80039c6:	2308      	movs	r3, #8
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d91e      	bls.n	8003a0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4413      	add	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <pvPortMalloc+0xf4>
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	e7fe      	b.n	80039f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	1ad2      	subs	r2, r2, r3
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a06:	69b8      	ldr	r0, [r7, #24]
 8003a08:	f000 f904 	bl	8003c14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a0c:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <pvPortMalloc+0x180>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <pvPortMalloc+0x180>)
 8003a18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a1a:	4b19      	ldr	r3, [pc, #100]	; (8003a80 <pvPortMalloc+0x180>)
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <pvPortMalloc+0x188>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d203      	bcs.n	8003a2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a26:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <pvPortMalloc+0x180>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <pvPortMalloc+0x188>)
 8003a2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <pvPortMalloc+0x17c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <pvPortMalloc+0x18c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <pvPortMalloc+0x18c>)
 8003a4a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a4c:	f7fe fd5c 	bl	8002508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <pvPortMalloc+0x16e>
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e7fe      	b.n	8003a6c <pvPortMalloc+0x16c>
	return pvReturn;
 8003a6e:	69fb      	ldr	r3, [r7, #28]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3728      	adds	r7, #40	; 0x28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20012d84 	.word	0x20012d84
 8003a7c:	20012d98 	.word	0x20012d98
 8003a80:	20012d88 	.word	0x20012d88
 8003a84:	20012d7c 	.word	0x20012d7c
 8003a88:	20012d8c 	.word	0x20012d8c
 8003a8c:	20012d90 	.word	0x20012d90

08003a90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04b      	beq.n	8003b3a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	425b      	negs	r3, r3
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <vPortFree+0xb4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <vPortFree+0x42>
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e7fe      	b.n	8003ad0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <vPortFree+0x5e>
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	e7fe      	b.n	8003aec <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	4b14      	ldr	r3, [pc, #80]	; (8003b44 <vPortFree+0xb4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d01e      	beq.n	8003b3a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d11a      	bne.n	8003b3a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <vPortFree+0xb4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b14:	f7fe fcea 	bl	80024ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <vPortFree+0xb8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4413      	add	r3, r2
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <vPortFree+0xb8>)
 8003b24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b26:	6938      	ldr	r0, [r7, #16]
 8003b28:	f000 f874 	bl	8003c14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b2c:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <vPortFree+0xbc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	4a06      	ldr	r2, [pc, #24]	; (8003b4c <vPortFree+0xbc>)
 8003b34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b36:	f7fe fce7 	bl	8002508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b3a:	bf00      	nop
 8003b3c:	3718      	adds	r7, #24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20012d98 	.word	0x20012d98
 8003b48:	20012d88 	.word	0x20012d88
 8003b4c:	20012d94 	.word	0x20012d94

08003b50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b56:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003b5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b5c:	4b27      	ldr	r3, [pc, #156]	; (8003bfc <prvHeapInit+0xac>)
 8003b5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00c      	beq.n	8003b84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3307      	adds	r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0307 	bic.w	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <prvHeapInit+0xac>)
 8003b80:	4413      	add	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b88:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <prvHeapInit+0xb0>)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <prvHeapInit+0xb0>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4413      	add	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0307 	bic.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <prvHeapInit+0xb4>)
 8003bb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bb2:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <prvHeapInit+0xb4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bba:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <prvHeapInit+0xb4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	1ad2      	subs	r2, r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <prvHeapInit+0xb4>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <prvHeapInit+0xb8>)
 8003bde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4a09      	ldr	r2, [pc, #36]	; (8003c0c <prvHeapInit+0xbc>)
 8003be6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <prvHeapInit+0xc0>)
 8003bea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bee:	601a      	str	r2, [r3, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	2000017c 	.word	0x2000017c
 8003c00:	20012d7c 	.word	0x20012d7c
 8003c04:	20012d84 	.word	0x20012d84
 8003c08:	20012d8c 	.word	0x20012d8c
 8003c0c:	20012d88 	.word	0x20012d88
 8003c10:	20012d98 	.word	0x20012d98

08003c14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c1c:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <prvInsertBlockIntoFreeList+0xac>)
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	e002      	b.n	8003c28 <prvInsertBlockIntoFreeList+0x14>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d8f7      	bhi.n	8003c22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d108      	bne.n	8003c56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	441a      	add	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	441a      	add	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d118      	bne.n	8003c9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <prvInsertBlockIntoFreeList+0xb0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d00d      	beq.n	8003c92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	441a      	add	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e008      	b.n	8003ca4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c92:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <prvInsertBlockIntoFreeList+0xb0>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e003      	b.n	8003ca4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d002      	beq.n	8003cb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20012d7c 	.word	0x20012d7c
 8003cc4:	20012d84 	.word	0x20012d84

08003cc8 <__libc_init_array>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	4e0d      	ldr	r6, [pc, #52]	; (8003d00 <__libc_init_array+0x38>)
 8003ccc:	4c0d      	ldr	r4, [pc, #52]	; (8003d04 <__libc_init_array+0x3c>)
 8003cce:	1ba4      	subs	r4, r4, r6
 8003cd0:	10a4      	asrs	r4, r4, #2
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	42a5      	cmp	r5, r4
 8003cd6:	d109      	bne.n	8003cec <__libc_init_array+0x24>
 8003cd8:	4e0b      	ldr	r6, [pc, #44]	; (8003d08 <__libc_init_array+0x40>)
 8003cda:	4c0c      	ldr	r4, [pc, #48]	; (8003d0c <__libc_init_array+0x44>)
 8003cdc:	f000 f82c 	bl	8003d38 <_init>
 8003ce0:	1ba4      	subs	r4, r4, r6
 8003ce2:	10a4      	asrs	r4, r4, #2
 8003ce4:	2500      	movs	r5, #0
 8003ce6:	42a5      	cmp	r5, r4
 8003ce8:	d105      	bne.n	8003cf6 <__libc_init_array+0x2e>
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cf0:	4798      	blx	r3
 8003cf2:	3501      	adds	r5, #1
 8003cf4:	e7ee      	b.n	8003cd4 <__libc_init_array+0xc>
 8003cf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003cfa:	4798      	blx	r3
 8003cfc:	3501      	adds	r5, #1
 8003cfe:	e7f2      	b.n	8003ce6 <__libc_init_array+0x1e>
 8003d00:	08003d98 	.word	0x08003d98
 8003d04:	08003d98 	.word	0x08003d98
 8003d08:	08003d98 	.word	0x08003d98
 8003d0c:	08003d9c 	.word	0x08003d9c

08003d10 <memcpy>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	1e43      	subs	r3, r0, #1
 8003d14:	440a      	add	r2, r1
 8003d16:	4291      	cmp	r1, r2
 8003d18:	d100      	bne.n	8003d1c <memcpy+0xc>
 8003d1a:	bd10      	pop	{r4, pc}
 8003d1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d24:	e7f7      	b.n	8003d16 <memcpy+0x6>

08003d26 <memset>:
 8003d26:	4402      	add	r2, r0
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d100      	bne.n	8003d30 <memset+0xa>
 8003d2e:	4770      	bx	lr
 8003d30:	f803 1b01 	strb.w	r1, [r3], #1
 8003d34:	e7f9      	b.n	8003d2a <memset+0x4>
	...

08003d38 <_init>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr

08003d44 <_fini>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr
